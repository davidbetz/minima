#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Minima.Service.Data.Context
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="Minima")]
	public partial class MinimaServiceLINQDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAuthor(Minima.Service.Data.Entity.Author instance);
    partial void UpdateAuthor(Minima.Service.Data.Entity.Author instance);
    partial void DeleteAuthor(Minima.Service.Data.Entity.Author instance);
    partial void InsertUserRight(Minima.Service.Data.Entity.UserRight instance);
    partial void UpdateUserRight(Minima.Service.Data.Entity.UserRight instance);
    partial void DeleteUserRight(Minima.Service.Data.Entity.UserRight instance);
    partial void InsertBlog(Minima.Service.Data.Entity.Blog instance);
    partial void UpdateBlog(Minima.Service.Data.Entity.Blog instance);
    partial void DeleteBlog(Minima.Service.Data.Entity.Blog instance);
    partial void InsertBlogEntry(Minima.Service.Data.Entity.BlogEntry instance);
    partial void UpdateBlogEntry(Minima.Service.Data.Entity.BlogEntry instance);
    partial void DeleteBlogEntry(Minima.Service.Data.Entity.BlogEntry instance);
    partial void InsertBlogEntryAuthor(Minima.Service.Data.Entity.BlogEntryAuthor instance);
    partial void UpdateBlogEntryAuthor(Minima.Service.Data.Entity.BlogEntryAuthor instance);
    partial void DeleteBlogEntryAuthor(Minima.Service.Data.Entity.BlogEntryAuthor instance);
    partial void InsertBlogEntryCommentAllowStatus(Minima.Service.Data.Entity.BlogEntryCommentAllowStatus instance);
    partial void UpdateBlogEntryCommentAllowStatus(Minima.Service.Data.Entity.BlogEntryCommentAllowStatus instance);
    partial void DeleteBlogEntryCommentAllowStatus(Minima.Service.Data.Entity.BlogEntryCommentAllowStatus instance);
    partial void InsertBlogEntryStatus(Minima.Service.Data.Entity.BlogEntryStatus instance);
    partial void UpdateBlogEntryStatus(Minima.Service.Data.Entity.BlogEntryStatus instance);
    partial void DeleteBlogEntryStatus(Minima.Service.Data.Entity.BlogEntryStatus instance);
    partial void InsertBlogEntryUrlMapping(Minima.Service.Data.Entity.BlogEntryUrlMapping instance);
    partial void UpdateBlogEntryUrlMapping(Minima.Service.Data.Entity.BlogEntryUrlMapping instance);
    partial void DeleteBlogEntryUrlMapping(Minima.Service.Data.Entity.BlogEntryUrlMapping instance);
    partial void InsertComment(Minima.Service.Data.Entity.Comment instance);
    partial void UpdateComment(Minima.Service.Data.Entity.Comment instance);
    partial void DeleteComment(Minima.Service.Data.Entity.Comment instance);
    partial void InsertLabel(Minima.Service.Data.Entity.Label instance);
    partial void UpdateLabel(Minima.Service.Data.Entity.Label instance);
    partial void DeleteLabel(Minima.Service.Data.Entity.Label instance);
    partial void InsertLabelBlogEntry(Minima.Service.Data.Entity.LabelBlogEntry instance);
    partial void UpdateLabelBlogEntry(Minima.Service.Data.Entity.LabelBlogEntry instance);
    partial void DeleteLabelBlogEntry(Minima.Service.Data.Entity.LabelBlogEntry instance);
    partial void InsertBlogImage(Minima.Service.Data.Entity.BlogImage instance);
    partial void UpdateBlogImage(Minima.Service.Data.Entity.BlogImage instance);
    partial void DeleteBlogImage(Minima.Service.Data.Entity.BlogImage instance);
    partial void InsertBlogEntryType(Minima.Service.Data.Entity.BlogEntryType instance);
    partial void UpdateBlogEntryType(Minima.Service.Data.Entity.BlogEntryType instance);
    partial void DeleteBlogEntryType(Minima.Service.Data.Entity.BlogEntryType instance);
    #endregion
		
		public MinimaServiceLINQDataContext() : 
				base(global::Minima.Service.Properties.Settings.Default.MinimaConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MinimaServiceLINQDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MinimaServiceLINQDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MinimaServiceLINQDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MinimaServiceLINQDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Minima.Service.Data.Entity.Author> Authors
		{
			get
			{
				return this.GetTable<Minima.Service.Data.Entity.Author>();
			}
		}
		
		public System.Data.Linq.Table<Minima.Service.Data.Entity.UserRight> UserRights
		{
			get
			{
				return this.GetTable<Minima.Service.Data.Entity.UserRight>();
			}
		}
		
		public System.Data.Linq.Table<Minima.Service.Data.Entity.AuthorBlogAssociation> AuthorBlogAssociations
		{
			get
			{
				return this.GetTable<Minima.Service.Data.Entity.AuthorBlogAssociation>();
			}
		}
		
		public System.Data.Linq.Table<Minima.Service.Data.Entity.Blog> Blogs
		{
			get
			{
				return this.GetTable<Minima.Service.Data.Entity.Blog>();
			}
		}
		
		public System.Data.Linq.Table<Minima.Service.Data.Entity.BlogEntry> BlogEntries
		{
			get
			{
				return this.GetTable<Minima.Service.Data.Entity.BlogEntry>();
			}
		}
		
		public System.Data.Linq.Table<Minima.Service.Data.Entity.BlogEntryAuthor> BlogEntryAuthors
		{
			get
			{
				return this.GetTable<Minima.Service.Data.Entity.BlogEntryAuthor>();
			}
		}
		
		public System.Data.Linq.Table<Minima.Service.Data.Entity.BlogEntryCommentAllowStatus> BlogEntryCommentAllowStatus
		{
			get
			{
				return this.GetTable<Minima.Service.Data.Entity.BlogEntryCommentAllowStatus>();
			}
		}
		
		public System.Data.Linq.Table<Minima.Service.Data.Entity.BlogEntryStatus> BlogEntryStatus
		{
			get
			{
				return this.GetTable<Minima.Service.Data.Entity.BlogEntryStatus>();
			}
		}
		
		public System.Data.Linq.Table<Minima.Service.Data.Entity.BlogEntryUrlMapping> BlogEntryUrlMappings
		{
			get
			{
				return this.GetTable<Minima.Service.Data.Entity.BlogEntryUrlMapping>();
			}
		}
		
		public System.Data.Linq.Table<Minima.Service.Data.Entity.Comment> Comments
		{
			get
			{
				return this.GetTable<Minima.Service.Data.Entity.Comment>();
			}
		}
		
		public System.Data.Linq.Table<Minima.Service.Data.Entity.Label> Labels
		{
			get
			{
				return this.GetTable<Minima.Service.Data.Entity.Label>();
			}
		}
		
		public System.Data.Linq.Table<Minima.Service.Data.Entity.LabelBlogEntry> LabelBlogEntries
		{
			get
			{
				return this.GetTable<Minima.Service.Data.Entity.LabelBlogEntry>();
			}
		}
		
		public System.Data.Linq.Table<Minima.Service.Data.Entity.BlogImage> BlogImages
		{
			get
			{
				return this.GetTable<Minima.Service.Data.Entity.BlogImage>();
			}
		}
		
		public System.Data.Linq.Table<Minima.Service.Data.Entity.BlogEntryType> BlogEntryTypes
		{
			get
			{
				return this.GetTable<Minima.Service.Data.Entity.BlogEntryType>();
			}
		}
		
		[Function(Name="svc.GetArchivedEntryList")]
		public ISingleResult<Minima.Service.Data.Entity.GetArchivedEntryListResult> GetArchivedEntryList([Parameter(Name="BlogId", DbType="Int")] System.Nullable<int> blogId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), blogId);
			return ((ISingleResult<Minima.Service.Data.Entity.GetArchivedEntryListResult>)(result.ReturnValue));
		}
	}
}
namespace Minima.Service.Data.Entity
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.ComponentModel;
	using System;
	
	
	[Table(Name="svc.Author")]
	public partial class Author : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AuthorId;
		
		private string _AuthorGuid;
		
		private string _AuthorName;
		
		private string _AuthorEmail;
		
		private string _AuthorPassword;
		
		private System.DateTime _AuthorCreateDate;
		
		private EntitySet<UserRight> _UserRights;
		
		private EntitySet<BlogEntryAuthor> _BlogEntryAuthors;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuthorIdChanging(int value);
    partial void OnAuthorIdChanged();
    partial void OnAuthorGuidChanging(string value);
    partial void OnAuthorGuidChanged();
    partial void OnAuthorNameChanging(string value);
    partial void OnAuthorNameChanged();
    partial void OnAuthorEmailChanging(string value);
    partial void OnAuthorEmailChanged();
    partial void OnAuthorPasswordChanging(string value);
    partial void OnAuthorPasswordChanged();
    partial void OnAuthorCreateDateChanging(System.DateTime value);
    partial void OnAuthorCreateDateChanged();
    #endregion
		
		public Author()
		{
			this._UserRights = new EntitySet<UserRight>(new Action<UserRight>(this.attach_UserRights), new Action<UserRight>(this.detach_UserRights));
			this._BlogEntryAuthors = new EntitySet<BlogEntryAuthor>(new Action<BlogEntryAuthor>(this.attach_BlogEntryAuthors), new Action<BlogEntryAuthor>(this.detach_BlogEntryAuthors));
			OnCreated();
		}
		
		[Column(Storage="_AuthorId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AuthorId
		{
			get
			{
				return this._AuthorId;
			}
			set
			{
				if ((this._AuthorId != value))
				{
					this.OnAuthorIdChanging(value);
					this.SendPropertyChanging();
					this._AuthorId = value;
					this.SendPropertyChanged("AuthorId");
					this.OnAuthorIdChanged();
				}
			}
		}
		
		[Column(Storage="_AuthorGuid", DbType="Char(36) NOT NULL", CanBeNull=false)]
		public string AuthorGuid
		{
			get
			{
				return this._AuthorGuid;
			}
			set
			{
				if ((this._AuthorGuid != value))
				{
					this.OnAuthorGuidChanging(value);
					this.SendPropertyChanging();
					this._AuthorGuid = value;
					this.SendPropertyChanged("AuthorGuid");
					this.OnAuthorGuidChanged();
				}
			}
		}
		
		[Column(Storage="_AuthorName", DbType="VarChar(100)")]
		public string AuthorName
		{
			get
			{
				return this._AuthorName;
			}
			set
			{
				if ((this._AuthorName != value))
				{
					this.OnAuthorNameChanging(value);
					this.SendPropertyChanging();
					this._AuthorName = value;
					this.SendPropertyChanged("AuthorName");
					this.OnAuthorNameChanged();
				}
			}
		}
		
		[Column(Storage="_AuthorEmail", DbType="VarChar(200)")]
		public string AuthorEmail
		{
			get
			{
				return this._AuthorEmail;
			}
			set
			{
				if ((this._AuthorEmail != value))
				{
					this.OnAuthorEmailChanging(value);
					this.SendPropertyChanging();
					this._AuthorEmail = value;
					this.SendPropertyChanged("AuthorEmail");
					this.OnAuthorEmailChanged();
				}
			}
		}
		
		[Column(Storage="_AuthorPassword", DbType="VarChar(5000)")]
		public string AuthorPassword
		{
			get
			{
				return this._AuthorPassword;
			}
			set
			{
				if ((this._AuthorPassword != value))
				{
					this.OnAuthorPasswordChanging(value);
					this.SendPropertyChanging();
					this._AuthorPassword = value;
					this.SendPropertyChanged("AuthorPassword");
					this.OnAuthorPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_AuthorCreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime AuthorCreateDate
		{
			get
			{
				return this._AuthorCreateDate;
			}
			set
			{
				if ((this._AuthorCreateDate != value))
				{
					this.OnAuthorCreateDateChanging(value);
					this.SendPropertyChanging();
					this._AuthorCreateDate = value;
					this.SendPropertyChanged("AuthorCreateDate");
					this.OnAuthorCreateDateChanged();
				}
			}
		}
		
		[Association(Name="Author_UserRight", Storage="_UserRights", OtherKey="AuthorId")]
		public EntitySet<UserRight> UserRights
		{
			get
			{
				return this._UserRights;
			}
			set
			{
				this._UserRights.Assign(value);
			}
		}
		
		[Association(Name="Author_BlogEntryAuthor", Storage="_BlogEntryAuthors", OtherKey="AuthorId")]
		public EntitySet<BlogEntryAuthor> BlogEntryAuthors
		{
			get
			{
				return this._BlogEntryAuthors;
			}
			set
			{
				this._BlogEntryAuthors.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserRights(UserRight entity)
		{
			this.SendPropertyChanging();
			entity.Author = this;
		}
		
		private void detach_UserRights(UserRight entity)
		{
			this.SendPropertyChanging();
			entity.Author = null;
		}
		
		private void attach_BlogEntryAuthors(BlogEntryAuthor entity)
		{
			this.SendPropertyChanging();
			entity.Author = this;
		}
		
		private void detach_BlogEntryAuthors(BlogEntryAuthor entity)
		{
			this.SendPropertyChanging();
			entity.Author = null;
		}
	}
	
	[Table(Name="svc.UserRight")]
	public partial class UserRight : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserRightId;
		
		private System.Nullable<int> _AuthorId;
		
		private System.Nullable<int> _BlogId;
		
		private char _UserRightLevel;
		
		private char _UserRightType;
		
		private EntityRef<Author> _Author;
		
		private EntityRef<Blog> _Blog;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserRightIdChanging(int value);
    partial void OnUserRightIdChanged();
    partial void OnAuthorIdChanging(System.Nullable<int> value);
    partial void OnAuthorIdChanged();
    partial void OnBlogIdChanging(System.Nullable<int> value);
    partial void OnBlogIdChanged();
    partial void OnUserRightLevelChanging(char value);
    partial void OnUserRightLevelChanged();
    partial void OnUserRightTypeChanging(char value);
    partial void OnUserRightTypeChanged();
    #endregion
		
		public UserRight()
		{
			this._Author = default(EntityRef<Author>);
			this._Blog = default(EntityRef<Blog>);
			OnCreated();
		}
		
		[Column(Storage="_UserRightId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserRightId
		{
			get
			{
				return this._UserRightId;
			}
			set
			{
				if ((this._UserRightId != value))
				{
					this.OnUserRightIdChanging(value);
					this.SendPropertyChanging();
					this._UserRightId = value;
					this.SendPropertyChanged("UserRightId");
					this.OnUserRightIdChanged();
				}
			}
		}
		
		[Column(Storage="_AuthorId", DbType="Int")]
		public System.Nullable<int> AuthorId
		{
			get
			{
				return this._AuthorId;
			}
			set
			{
				if ((this._AuthorId != value))
				{
					if (this._Author.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuthorIdChanging(value);
					this.SendPropertyChanging();
					this._AuthorId = value;
					this.SendPropertyChanged("AuthorId");
					this.OnAuthorIdChanged();
				}
			}
		}
		
		[Column(Storage="_BlogId", DbType="Int")]
		public System.Nullable<int> BlogId
		{
			get
			{
				return this._BlogId;
			}
			set
			{
				if ((this._BlogId != value))
				{
					if (this._Blog.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBlogIdChanging(value);
					this.SendPropertyChanging();
					this._BlogId = value;
					this.SendPropertyChanged("BlogId");
					this.OnBlogIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserRightLevel", DbType="Char(1) NOT NULL")]
		public char UserRightLevel
		{
			get
			{
				return this._UserRightLevel;
			}
			set
			{
				if ((this._UserRightLevel != value))
				{
					this.OnUserRightLevelChanging(value);
					this.SendPropertyChanging();
					this._UserRightLevel = value;
					this.SendPropertyChanged("UserRightLevel");
					this.OnUserRightLevelChanged();
				}
			}
		}
		
		[Column(Storage="_UserRightType", DbType="Char(1) NOT NULL")]
		public char UserRightType
		{
			get
			{
				return this._UserRightType;
			}
			set
			{
				if ((this._UserRightType != value))
				{
					this.OnUserRightTypeChanging(value);
					this.SendPropertyChanging();
					this._UserRightType = value;
					this.SendPropertyChanged("UserRightType");
					this.OnUserRightTypeChanged();
				}
			}
		}
		
		[Association(Name="Author_UserRight", Storage="_Author", ThisKey="AuthorId", IsForeignKey=true)]
		public Author Author
		{
			get
			{
				return this._Author.Entity;
			}
			set
			{
				Author previousValue = this._Author.Entity;
				if (((previousValue != value) 
							|| (this._Author.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Author.Entity = null;
						previousValue.UserRights.Remove(this);
					}
					this._Author.Entity = value;
					if ((value != null))
					{
						value.UserRights.Add(this);
						this._AuthorId = value.AuthorId;
					}
					else
					{
						this._AuthorId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Author");
				}
			}
		}
		
		[Association(Name="Blog_UserRight", Storage="_Blog", ThisKey="BlogId", IsForeignKey=true)]
		public Blog Blog
		{
			get
			{
				return this._Blog.Entity;
			}
			set
			{
				Blog previousValue = this._Blog.Entity;
				if (((previousValue != value) 
							|| (this._Blog.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Blog.Entity = null;
						previousValue.UserRights.Remove(this);
					}
					this._Blog.Entity = value;
					if ((value != null))
					{
						value.UserRights.Add(this);
						this._BlogId = value.BlogId;
					}
					else
					{
						this._BlogId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Blog");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="svc.AuthorBlogAssociation")]
	public partial class AuthorBlogAssociation
	{
		
		private int _AuthorId;
		
		private int _BlogId;
		
		public AuthorBlogAssociation()
		{
		}
		
		[Column(Storage="_AuthorId", DbType="Int NOT NULL")]
		public int AuthorId
		{
			get
			{
				return this._AuthorId;
			}
			set
			{
				if ((this._AuthorId != value))
				{
					this._AuthorId = value;
				}
			}
		}
		
		[Column(Storage="_BlogId", DbType="Int NOT NULL")]
		public int BlogId
		{
			get
			{
				return this._BlogId;
			}
			set
			{
				if ((this._BlogId != value))
				{
					this._BlogId = value;
				}
			}
		}
	}
	
	[Table(Name="svc.Blog")]
	public partial class Blog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BlogId;
		
		private string _BlogGuid;
		
		private string _BlogTitle;
		
		private string _BlogDescription;
		
		private string _BlogPrimaryUrl;
		
		private string _BlogFeedUrl;
		
		private string _BlogFeedTitle;
		
		private System.DateTime _BlogCreateDate;
		
		private EntitySet<UserRight> _UserRights;
		
		private EntitySet<BlogEntry> _BlogEntries;
		
		private EntitySet<Label> _Labels;
		
		private EntitySet<BlogImage> _BlogImages;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBlogIdChanging(int value);
    partial void OnBlogIdChanged();
    partial void OnBlogGuidChanging(string value);
    partial void OnBlogGuidChanged();
    partial void OnBlogTitleChanging(string value);
    partial void OnBlogTitleChanged();
    partial void OnBlogDescriptionChanging(string value);
    partial void OnBlogDescriptionChanged();
    partial void OnBlogPrimaryUrlChanging(string value);
    partial void OnBlogPrimaryUrlChanged();
    partial void OnBlogFeedUrlChanging(string value);
    partial void OnBlogFeedUrlChanged();
    partial void OnBlogFeedTitleChanging(string value);
    partial void OnBlogFeedTitleChanged();
    partial void OnBlogCreateDateChanging(System.DateTime value);
    partial void OnBlogCreateDateChanged();
    #endregion
		
		public Blog()
		{
			this._UserRights = new EntitySet<UserRight>(new Action<UserRight>(this.attach_UserRights), new Action<UserRight>(this.detach_UserRights));
			this._BlogEntries = new EntitySet<BlogEntry>(new Action<BlogEntry>(this.attach_BlogEntries), new Action<BlogEntry>(this.detach_BlogEntries));
			this._Labels = new EntitySet<Label>(new Action<Label>(this.attach_Labels), new Action<Label>(this.detach_Labels));
			this._BlogImages = new EntitySet<BlogImage>(new Action<BlogImage>(this.attach_BlogImages), new Action<BlogImage>(this.detach_BlogImages));
			OnCreated();
		}
		
		[Column(Storage="_BlogId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BlogId
		{
			get
			{
				return this._BlogId;
			}
			set
			{
				if ((this._BlogId != value))
				{
					this.OnBlogIdChanging(value);
					this.SendPropertyChanging();
					this._BlogId = value;
					this.SendPropertyChanged("BlogId");
					this.OnBlogIdChanged();
				}
			}
		}
		
		[Column(Storage="_BlogGuid", DbType="Char(36) NOT NULL", CanBeNull=false)]
		public string BlogGuid
		{
			get
			{
				return this._BlogGuid;
			}
			set
			{
				if ((this._BlogGuid != value))
				{
					this.OnBlogGuidChanging(value);
					this.SendPropertyChanging();
					this._BlogGuid = value;
					this.SendPropertyChanged("BlogGuid");
					this.OnBlogGuidChanged();
				}
			}
		}
		
		[Column(Storage="_BlogTitle", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string BlogTitle
		{
			get
			{
				return this._BlogTitle;
			}
			set
			{
				if ((this._BlogTitle != value))
				{
					this.OnBlogTitleChanging(value);
					this.SendPropertyChanging();
					this._BlogTitle = value;
					this.SendPropertyChanged("BlogTitle");
					this.OnBlogTitleChanged();
				}
			}
		}
		
		[Column(Storage="_BlogDescription", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
		public string BlogDescription
		{
			get
			{
				return this._BlogDescription;
			}
			set
			{
				if ((this._BlogDescription != value))
				{
					this.OnBlogDescriptionChanging(value);
					this.SendPropertyChanging();
					this._BlogDescription = value;
					this.SendPropertyChanged("BlogDescription");
					this.OnBlogDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_BlogPrimaryUrl", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
		public string BlogPrimaryUrl
		{
			get
			{
				return this._BlogPrimaryUrl;
			}
			set
			{
				if ((this._BlogPrimaryUrl != value))
				{
					this.OnBlogPrimaryUrlChanging(value);
					this.SendPropertyChanging();
					this._BlogPrimaryUrl = value;
					this.SendPropertyChanged("BlogPrimaryUrl");
					this.OnBlogPrimaryUrlChanged();
				}
			}
		}
		
		[Column(Storage="_BlogFeedUrl", DbType="VarChar(1000)")]
		public string BlogFeedUrl
		{
			get
			{
				return this._BlogFeedUrl;
			}
			set
			{
				if ((this._BlogFeedUrl != value))
				{
					this.OnBlogFeedUrlChanging(value);
					this.SendPropertyChanging();
					this._BlogFeedUrl = value;
					this.SendPropertyChanged("BlogFeedUrl");
					this.OnBlogFeedUrlChanged();
				}
			}
		}
		
		[Column(Storage="_BlogFeedTitle", DbType="VarChar(500)")]
		public string BlogFeedTitle
		{
			get
			{
				return this._BlogFeedTitle;
			}
			set
			{
				if ((this._BlogFeedTitle != value))
				{
					this.OnBlogFeedTitleChanging(value);
					this.SendPropertyChanging();
					this._BlogFeedTitle = value;
					this.SendPropertyChanged("BlogFeedTitle");
					this.OnBlogFeedTitleChanged();
				}
			}
		}
		
		[Column(Storage="_BlogCreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime BlogCreateDate
		{
			get
			{
				return this._BlogCreateDate;
			}
			set
			{
				if ((this._BlogCreateDate != value))
				{
					this.OnBlogCreateDateChanging(value);
					this.SendPropertyChanging();
					this._BlogCreateDate = value;
					this.SendPropertyChanged("BlogCreateDate");
					this.OnBlogCreateDateChanged();
				}
			}
		}
		
		[Association(Name="Blog_UserRight", Storage="_UserRights", OtherKey="BlogId")]
		public EntitySet<UserRight> UserRights
		{
			get
			{
				return this._UserRights;
			}
			set
			{
				this._UserRights.Assign(value);
			}
		}
		
		[Association(Name="Blog_BlogEntry", Storage="_BlogEntries", OtherKey="BlogId")]
		public EntitySet<BlogEntry> BlogEntries
		{
			get
			{
				return this._BlogEntries;
			}
			set
			{
				this._BlogEntries.Assign(value);
			}
		}
		
		[Association(Name="Blog_Label", Storage="_Labels", OtherKey="BlogId")]
		public EntitySet<Label> Labels
		{
			get
			{
				return this._Labels;
			}
			set
			{
				this._Labels.Assign(value);
			}
		}
		
		[Association(Name="Blog_BlogImage", Storage="_BlogImages", OtherKey="BlogId")]
		public EntitySet<BlogImage> BlogImages
		{
			get
			{
				return this._BlogImages;
			}
			set
			{
				this._BlogImages.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserRights(UserRight entity)
		{
			this.SendPropertyChanging();
			entity.Blog = this;
		}
		
		private void detach_UserRights(UserRight entity)
		{
			this.SendPropertyChanging();
			entity.Blog = null;
		}
		
		private void attach_BlogEntries(BlogEntry entity)
		{
			this.SendPropertyChanging();
			entity.Blog = this;
		}
		
		private void detach_BlogEntries(BlogEntry entity)
		{
			this.SendPropertyChanging();
			entity.Blog = null;
		}
		
		private void attach_Labels(Label entity)
		{
			this.SendPropertyChanging();
			entity.Blog = this;
		}
		
		private void detach_Labels(Label entity)
		{
			this.SendPropertyChanging();
			entity.Blog = null;
		}
		
		private void attach_BlogImages(BlogImage entity)
		{
			this.SendPropertyChanging();
			entity.Blog = this;
		}
		
		private void detach_BlogImages(BlogImage entity)
		{
			this.SendPropertyChanging();
			entity.Blog = null;
		}
	}
	
	[Table(Name="svc.BlogEntry")]
	public partial class BlogEntry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BlogEntryId;
		
		private string _BlogEntryGuid;
		
		private int _BlogId;
		
		private int _BlogEntryStatusId;
		
		private int _BlogEntryCommentAllowStatusId;
		
		private string _BlogEntryTitle;
		
		private string _BlogEntryText;
		
		private System.Nullable<int> _BlogEntryPostYear;
		
		private System.Nullable<int> _BlogEntryPostMonth;
		
		private System.Nullable<int> _BlogEntryPostDay;
		
		private string _BlogEntryPostTime;
		
		private System.DateTime _BlogEntryModifyDateTime;
		
		private System.DateTime _BlogEntryPostDateTime;
		
		private int _BlogEntryTypeId;
		
		private EntitySet<BlogEntryAuthor> _BlogEntryAuthors;
		
		private EntitySet<BlogEntryUrlMapping> _BlogEntryUrlMappings;
		
		private EntitySet<Comment> _Comments;
		
		private EntitySet<LabelBlogEntry> _LabelBlogEntries;
		
		private EntityRef<Blog> _Blog;
		
		private EntityRef<BlogEntryCommentAllowStatus> _BlogEntryCommentAllowStatus;
		
		private EntityRef<BlogEntryStatus> _BlogEntryStatus;
		
		private EntityRef<BlogEntryType> _BlogEntryType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBlogEntryIdChanging(int value);
    partial void OnBlogEntryIdChanged();
    partial void OnBlogEntryGuidChanging(string value);
    partial void OnBlogEntryGuidChanged();
    partial void OnBlogIdChanging(int value);
    partial void OnBlogIdChanged();
    partial void OnBlogEntryStatusIdChanging(int value);
    partial void OnBlogEntryStatusIdChanged();
    partial void OnBlogEntryCommentAllowStatusIdChanging(int value);
    partial void OnBlogEntryCommentAllowStatusIdChanged();
    partial void OnBlogEntryTitleChanging(string value);
    partial void OnBlogEntryTitleChanged();
    partial void OnBlogEntryTextChanging(string value);
    partial void OnBlogEntryTextChanged();
    partial void OnBlogEntryPostYearChanging(System.Nullable<int> value);
    partial void OnBlogEntryPostYearChanged();
    partial void OnBlogEntryPostMonthChanging(System.Nullable<int> value);
    partial void OnBlogEntryPostMonthChanged();
    partial void OnBlogEntryPostDayChanging(System.Nullable<int> value);
    partial void OnBlogEntryPostDayChanged();
    partial void OnBlogEntryPostTimeChanging(string value);
    partial void OnBlogEntryPostTimeChanged();
    partial void OnBlogEntryModifyDateTimeChanging(System.DateTime value);
    partial void OnBlogEntryModifyDateTimeChanged();
    partial void OnBlogEntryPostDateTimeChanging(System.DateTime value);
    partial void OnBlogEntryPostDateTimeChanged();
    partial void OnBlogEntryTypeIdChanging(int value);
    partial void OnBlogEntryTypeIdChanged();
    #endregion
		
		public BlogEntry()
		{
			this._BlogEntryAuthors = new EntitySet<BlogEntryAuthor>(new Action<BlogEntryAuthor>(this.attach_BlogEntryAuthors), new Action<BlogEntryAuthor>(this.detach_BlogEntryAuthors));
			this._BlogEntryUrlMappings = new EntitySet<BlogEntryUrlMapping>(new Action<BlogEntryUrlMapping>(this.attach_BlogEntryUrlMappings), new Action<BlogEntryUrlMapping>(this.detach_BlogEntryUrlMappings));
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._LabelBlogEntries = new EntitySet<LabelBlogEntry>(new Action<LabelBlogEntry>(this.attach_LabelBlogEntries), new Action<LabelBlogEntry>(this.detach_LabelBlogEntries));
			this._Blog = default(EntityRef<Blog>);
			this._BlogEntryCommentAllowStatus = default(EntityRef<BlogEntryCommentAllowStatus>);
			this._BlogEntryStatus = default(EntityRef<BlogEntryStatus>);
			this._BlogEntryType = default(EntityRef<BlogEntryType>);
			OnCreated();
		}
		
		[Column(Storage="_BlogEntryId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BlogEntryId
		{
			get
			{
				return this._BlogEntryId;
			}
			set
			{
				if ((this._BlogEntryId != value))
				{
					this.OnBlogEntryIdChanging(value);
					this.SendPropertyChanging();
					this._BlogEntryId = value;
					this.SendPropertyChanged("BlogEntryId");
					this.OnBlogEntryIdChanged();
				}
			}
		}
		
		[Column(Storage="_BlogEntryGuid", DbType="Char(36) NOT NULL", CanBeNull=false)]
		public string BlogEntryGuid
		{
			get
			{
				return this._BlogEntryGuid;
			}
			set
			{
				if ((this._BlogEntryGuid != value))
				{
					this.OnBlogEntryGuidChanging(value);
					this.SendPropertyChanging();
					this._BlogEntryGuid = value;
					this.SendPropertyChanged("BlogEntryGuid");
					this.OnBlogEntryGuidChanged();
				}
			}
		}
		
		[Column(Storage="_BlogId", DbType="Int NOT NULL")]
		public int BlogId
		{
			get
			{
				return this._BlogId;
			}
			set
			{
				if ((this._BlogId != value))
				{
					if (this._Blog.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBlogIdChanging(value);
					this.SendPropertyChanging();
					this._BlogId = value;
					this.SendPropertyChanged("BlogId");
					this.OnBlogIdChanged();
				}
			}
		}
		
		[Column(Storage="_BlogEntryStatusId", DbType="Int NOT NULL")]
		public int BlogEntryStatusId
		{
			get
			{
				return this._BlogEntryStatusId;
			}
			set
			{
				if ((this._BlogEntryStatusId != value))
				{
					if (this._BlogEntryStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBlogEntryStatusIdChanging(value);
					this.SendPropertyChanging();
					this._BlogEntryStatusId = value;
					this.SendPropertyChanged("BlogEntryStatusId");
					this.OnBlogEntryStatusIdChanged();
				}
			}
		}
		
		[Column(Storage="_BlogEntryCommentAllowStatusId", DbType="Int NOT NULL")]
		public int BlogEntryCommentAllowStatusId
		{
			get
			{
				return this._BlogEntryCommentAllowStatusId;
			}
			set
			{
				if ((this._BlogEntryCommentAllowStatusId != value))
				{
					if (this._BlogEntryCommentAllowStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBlogEntryCommentAllowStatusIdChanging(value);
					this.SendPropertyChanging();
					this._BlogEntryCommentAllowStatusId = value;
					this.SendPropertyChanged("BlogEntryCommentAllowStatusId");
					this.OnBlogEntryCommentAllowStatusIdChanged();
				}
			}
		}
		
		[Column(Storage="_BlogEntryTitle", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string BlogEntryTitle
		{
			get
			{
				return this._BlogEntryTitle;
			}
			set
			{
				if ((this._BlogEntryTitle != value))
				{
					this.OnBlogEntryTitleChanging(value);
					this.SendPropertyChanging();
					this._BlogEntryTitle = value;
					this.SendPropertyChanged("BlogEntryTitle");
					this.OnBlogEntryTitleChanged();
				}
			}
		}
		
		[Column(Storage="_BlogEntryText", DbType="VarChar(MAX)")]
		public string BlogEntryText
		{
			get
			{
				return this._BlogEntryText;
			}
			set
			{
				if ((this._BlogEntryText != value))
				{
					this.OnBlogEntryTextChanging(value);
					this.SendPropertyChanging();
					this._BlogEntryText = value;
					this.SendPropertyChanged("BlogEntryText");
					this.OnBlogEntryTextChanged();
				}
			}
		}
		
		[Column(Storage="_BlogEntryPostYear", AutoSync=AutoSync.Always, DbType="Int", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> BlogEntryPostYear
		{
			get
			{
				return this._BlogEntryPostYear;
			}
			set
			{
				if ((this._BlogEntryPostYear != value))
				{
					this.OnBlogEntryPostYearChanging(value);
					this.SendPropertyChanging();
					this._BlogEntryPostYear = value;
					this.SendPropertyChanged("BlogEntryPostYear");
					this.OnBlogEntryPostYearChanged();
				}
			}
		}
		
		[Column(Storage="_BlogEntryPostMonth", AutoSync=AutoSync.Always, DbType="Int", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> BlogEntryPostMonth
		{
			get
			{
				return this._BlogEntryPostMonth;
			}
			set
			{
				if ((this._BlogEntryPostMonth != value))
				{
					this.OnBlogEntryPostMonthChanging(value);
					this.SendPropertyChanging();
					this._BlogEntryPostMonth = value;
					this.SendPropertyChanged("BlogEntryPostMonth");
					this.OnBlogEntryPostMonthChanged();
				}
			}
		}
		
		[Column(Storage="_BlogEntryPostDay", AutoSync=AutoSync.Always, DbType="Int", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> BlogEntryPostDay
		{
			get
			{
				return this._BlogEntryPostDay;
			}
			set
			{
				if ((this._BlogEntryPostDay != value))
				{
					this.OnBlogEntryPostDayChanging(value);
					this.SendPropertyChanging();
					this._BlogEntryPostDay = value;
					this.SendPropertyChanged("BlogEntryPostDay");
					this.OnBlogEntryPostDayChanged();
				}
			}
		}
		
		[Column(Storage="_BlogEntryPostTime", AutoSync=AutoSync.Always, DbType="VarChar(7)", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public string BlogEntryPostTime
		{
			get
			{
				return this._BlogEntryPostTime;
			}
			set
			{
				if ((this._BlogEntryPostTime != value))
				{
					this.OnBlogEntryPostTimeChanging(value);
					this.SendPropertyChanging();
					this._BlogEntryPostTime = value;
					this.SendPropertyChanged("BlogEntryPostTime");
					this.OnBlogEntryPostTimeChanged();
				}
			}
		}
		
		[Column(Storage="_BlogEntryModifyDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime BlogEntryModifyDateTime
		{
			get
			{
				return this._BlogEntryModifyDateTime;
			}
			set
			{
				if ((this._BlogEntryModifyDateTime != value))
				{
					this.OnBlogEntryModifyDateTimeChanging(value);
					this.SendPropertyChanging();
					this._BlogEntryModifyDateTime = value;
					this.SendPropertyChanged("BlogEntryModifyDateTime");
					this.OnBlogEntryModifyDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_BlogEntryPostDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime BlogEntryPostDateTime
		{
			get
			{
				return this._BlogEntryPostDateTime;
			}
			set
			{
				if ((this._BlogEntryPostDateTime != value))
				{
					this.OnBlogEntryPostDateTimeChanging(value);
					this.SendPropertyChanging();
					this._BlogEntryPostDateTime = value;
					this.SendPropertyChanged("BlogEntryPostDateTime");
					this.OnBlogEntryPostDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_BlogEntryTypeId", DbType="Int")]
		public int BlogEntryTypeId
		{
			get
			{
				return this._BlogEntryTypeId;
			}
			set
			{
				if ((this._BlogEntryTypeId != value))
				{
					if (this._BlogEntryType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBlogEntryTypeIdChanging(value);
					this.SendPropertyChanging();
					this._BlogEntryTypeId = value;
					this.SendPropertyChanged("BlogEntryTypeId");
					this.OnBlogEntryTypeIdChanged();
				}
			}
		}
		
		[Association(Name="BlogEntry_BlogEntryAuthor", Storage="_BlogEntryAuthors", OtherKey="BlogEntryId")]
		public EntitySet<BlogEntryAuthor> BlogEntryAuthors
		{
			get
			{
				return this._BlogEntryAuthors;
			}
			set
			{
				this._BlogEntryAuthors.Assign(value);
			}
		}
		
		[Association(Name="BlogEntry_BlogEntryUrlMapping", Storage="_BlogEntryUrlMappings", OtherKey="BlogEntryId")]
		public EntitySet<BlogEntryUrlMapping> BlogEntryUrlMappings
		{
			get
			{
				return this._BlogEntryUrlMappings;
			}
			set
			{
				this._BlogEntryUrlMappings.Assign(value);
			}
		}
		
		[Association(Name="BlogEntry_Comment", Storage="_Comments", OtherKey="BlogEntryId")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[Association(Name="BlogEntry_LabelBlogEntry", Storage="_LabelBlogEntries", OtherKey="BlogEntryId")]
		public EntitySet<LabelBlogEntry> LabelBlogEntries
		{
			get
			{
				return this._LabelBlogEntries;
			}
			set
			{
				this._LabelBlogEntries.Assign(value);
			}
		}
		
		[Association(Name="Blog_BlogEntry", Storage="_Blog", ThisKey="BlogId", IsForeignKey=true)]
		public Blog Blog
		{
			get
			{
				return this._Blog.Entity;
			}
			set
			{
				Blog previousValue = this._Blog.Entity;
				if (((previousValue != value) 
							|| (this._Blog.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Blog.Entity = null;
						previousValue.BlogEntries.Remove(this);
					}
					this._Blog.Entity = value;
					if ((value != null))
					{
						value.BlogEntries.Add(this);
						this._BlogId = value.BlogId;
					}
					else
					{
						this._BlogId = default(int);
					}
					this.SendPropertyChanged("Blog");
				}
			}
		}
		
		[Association(Name="BlogEntryCommentAllowStatus_BlogEntry", Storage="_BlogEntryCommentAllowStatus", ThisKey="BlogEntryCommentAllowStatusId", IsForeignKey=true)]
		public BlogEntryCommentAllowStatus BlogEntryCommentAllowStatus
		{
			get
			{
				return this._BlogEntryCommentAllowStatus.Entity;
			}
			set
			{
				BlogEntryCommentAllowStatus previousValue = this._BlogEntryCommentAllowStatus.Entity;
				if (((previousValue != value) 
							|| (this._BlogEntryCommentAllowStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BlogEntryCommentAllowStatus.Entity = null;
						previousValue.BlogEntries.Remove(this);
					}
					this._BlogEntryCommentAllowStatus.Entity = value;
					if ((value != null))
					{
						value.BlogEntries.Add(this);
						this._BlogEntryCommentAllowStatusId = value.BlogEntryCommentAllowStatusId;
					}
					else
					{
						this._BlogEntryCommentAllowStatusId = default(int);
					}
					this.SendPropertyChanged("BlogEntryCommentAllowStatus");
				}
			}
		}
		
		[Association(Name="BlogEntryStatus_BlogEntry", Storage="_BlogEntryStatus", ThisKey="BlogEntryStatusId", IsForeignKey=true)]
		public BlogEntryStatus BlogEntryStatus
		{
			get
			{
				return this._BlogEntryStatus.Entity;
			}
			set
			{
				BlogEntryStatus previousValue = this._BlogEntryStatus.Entity;
				if (((previousValue != value) 
							|| (this._BlogEntryStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BlogEntryStatus.Entity = null;
						previousValue.BlogEntries.Remove(this);
					}
					this._BlogEntryStatus.Entity = value;
					if ((value != null))
					{
						value.BlogEntries.Add(this);
						this._BlogEntryStatusId = value.BlogEntryStatusId;
					}
					else
					{
						this._BlogEntryStatusId = default(int);
					}
					this.SendPropertyChanged("BlogEntryStatus");
				}
			}
		}
		
		[Association(Name="BlogEntryType_BlogEntry", Storage="_BlogEntryType", ThisKey="BlogEntryTypeId", IsForeignKey=true)]
		public BlogEntryType BlogEntryType
		{
			get
			{
				return this._BlogEntryType.Entity;
			}
			set
			{
				BlogEntryType previousValue = this._BlogEntryType.Entity;
				if (((previousValue != value) 
							|| (this._BlogEntryType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BlogEntryType.Entity = null;
						previousValue.BlogEntries.Remove(this);
					}
					this._BlogEntryType.Entity = value;
					if ((value != null))
					{
						value.BlogEntries.Add(this);
						this._BlogEntryTypeId = value.BlogEntryTypeId;
					}
					else
					{
						this._BlogEntryTypeId = default(int);
					}
					this.SendPropertyChanged("BlogEntryType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BlogEntryAuthors(BlogEntryAuthor entity)
		{
			this.SendPropertyChanging();
			entity.BlogEntry = this;
		}
		
		private void detach_BlogEntryAuthors(BlogEntryAuthor entity)
		{
			this.SendPropertyChanging();
			entity.BlogEntry = null;
		}
		
		private void attach_BlogEntryUrlMappings(BlogEntryUrlMapping entity)
		{
			this.SendPropertyChanging();
			entity.BlogEntry = this;
		}
		
		private void detach_BlogEntryUrlMappings(BlogEntryUrlMapping entity)
		{
			this.SendPropertyChanging();
			entity.BlogEntry = null;
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.BlogEntry = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.BlogEntry = null;
		}
		
		private void attach_LabelBlogEntries(LabelBlogEntry entity)
		{
			this.SendPropertyChanging();
			entity.BlogEntry = this;
		}
		
		private void detach_LabelBlogEntries(LabelBlogEntry entity)
		{
			this.SendPropertyChanging();
			entity.BlogEntry = null;
		}
	}
	
	[Table(Name="svc.BlogEntryAuthor")]
	public partial class BlogEntryAuthor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AuthorId;
		
		private int _BlogEntryId;
		
		private EntityRef<Author> _Author;
		
		private EntityRef<BlogEntry> _BlogEntry;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuthorIdChanging(int value);
    partial void OnAuthorIdChanged();
    partial void OnBlogEntryIdChanging(int value);
    partial void OnBlogEntryIdChanged();
    #endregion
		
		public BlogEntryAuthor()
		{
			this._Author = default(EntityRef<Author>);
			this._BlogEntry = default(EntityRef<BlogEntry>);
			OnCreated();
		}
		
		[Column(Storage="_AuthorId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AuthorId
		{
			get
			{
				return this._AuthorId;
			}
			set
			{
				if ((this._AuthorId != value))
				{
					if (this._Author.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuthorIdChanging(value);
					this.SendPropertyChanging();
					this._AuthorId = value;
					this.SendPropertyChanged("AuthorId");
					this.OnAuthorIdChanged();
				}
			}
		}
		
		[Column(Storage="_BlogEntryId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BlogEntryId
		{
			get
			{
				return this._BlogEntryId;
			}
			set
			{
				if ((this._BlogEntryId != value))
				{
					if (this._BlogEntry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBlogEntryIdChanging(value);
					this.SendPropertyChanging();
					this._BlogEntryId = value;
					this.SendPropertyChanged("BlogEntryId");
					this.OnBlogEntryIdChanged();
				}
			}
		}
		
		[Association(Name="Author_BlogEntryAuthor", Storage="_Author", ThisKey="AuthorId", IsForeignKey=true)]
		public Author Author
		{
			get
			{
				return this._Author.Entity;
			}
			set
			{
				Author previousValue = this._Author.Entity;
				if (((previousValue != value) 
							|| (this._Author.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Author.Entity = null;
						previousValue.BlogEntryAuthors.Remove(this);
					}
					this._Author.Entity = value;
					if ((value != null))
					{
						value.BlogEntryAuthors.Add(this);
						this._AuthorId = value.AuthorId;
					}
					else
					{
						this._AuthorId = default(int);
					}
					this.SendPropertyChanged("Author");
				}
			}
		}
		
		[Association(Name="BlogEntry_BlogEntryAuthor", Storage="_BlogEntry", ThisKey="BlogEntryId", IsForeignKey=true)]
		public BlogEntry BlogEntry
		{
			get
			{
				return this._BlogEntry.Entity;
			}
			set
			{
				BlogEntry previousValue = this._BlogEntry.Entity;
				if (((previousValue != value) 
							|| (this._BlogEntry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BlogEntry.Entity = null;
						previousValue.BlogEntryAuthors.Remove(this);
					}
					this._BlogEntry.Entity = value;
					if ((value != null))
					{
						value.BlogEntryAuthors.Add(this);
						this._BlogEntryId = value.BlogEntryId;
					}
					else
					{
						this._BlogEntryId = default(int);
					}
					this.SendPropertyChanged("BlogEntry");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="svc.BlogEntryCommentAllowStatus")]
	public partial class BlogEntryCommentAllowStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BlogEntryCommentAllowStatusId;
		
		private string _BlogEntryCommentAllowStatusText;
		
		private EntitySet<BlogEntry> _BlogEntries;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBlogEntryCommentAllowStatusIdChanging(int value);
    partial void OnBlogEntryCommentAllowStatusIdChanged();
    partial void OnBlogEntryCommentAllowStatusTextChanging(string value);
    partial void OnBlogEntryCommentAllowStatusTextChanged();
    #endregion
		
		public BlogEntryCommentAllowStatus()
		{
			this._BlogEntries = new EntitySet<BlogEntry>(new Action<BlogEntry>(this.attach_BlogEntries), new Action<BlogEntry>(this.detach_BlogEntries));
			OnCreated();
		}
		
		[Column(Storage="_BlogEntryCommentAllowStatusId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BlogEntryCommentAllowStatusId
		{
			get
			{
				return this._BlogEntryCommentAllowStatusId;
			}
			set
			{
				if ((this._BlogEntryCommentAllowStatusId != value))
				{
					this.OnBlogEntryCommentAllowStatusIdChanging(value);
					this.SendPropertyChanging();
					this._BlogEntryCommentAllowStatusId = value;
					this.SendPropertyChanged("BlogEntryCommentAllowStatusId");
					this.OnBlogEntryCommentAllowStatusIdChanged();
				}
			}
		}
		
		[Column(Storage="_BlogEntryCommentAllowStatusText", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string BlogEntryCommentAllowStatusText
		{
			get
			{
				return this._BlogEntryCommentAllowStatusText;
			}
			set
			{
				if ((this._BlogEntryCommentAllowStatusText != value))
				{
					this.OnBlogEntryCommentAllowStatusTextChanging(value);
					this.SendPropertyChanging();
					this._BlogEntryCommentAllowStatusText = value;
					this.SendPropertyChanged("BlogEntryCommentAllowStatusText");
					this.OnBlogEntryCommentAllowStatusTextChanged();
				}
			}
		}
		
		[Association(Name="BlogEntryCommentAllowStatus_BlogEntry", Storage="_BlogEntries", OtherKey="BlogEntryCommentAllowStatusId")]
		public EntitySet<BlogEntry> BlogEntries
		{
			get
			{
				return this._BlogEntries;
			}
			set
			{
				this._BlogEntries.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BlogEntries(BlogEntry entity)
		{
			this.SendPropertyChanging();
			entity.BlogEntryCommentAllowStatus = this;
		}
		
		private void detach_BlogEntries(BlogEntry entity)
		{
			this.SendPropertyChanging();
			entity.BlogEntryCommentAllowStatus = null;
		}
	}
	
	[Table(Name="svc.BlogEntryStatus")]
	public partial class BlogEntryStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BlogEntryStatusId;
		
		private string _BlogEntryStatusName;
		
		private EntitySet<BlogEntry> _BlogEntries;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBlogEntryStatusIdChanging(int value);
    partial void OnBlogEntryStatusIdChanged();
    partial void OnBlogEntryStatusNameChanging(string value);
    partial void OnBlogEntryStatusNameChanged();
    #endregion
		
		public BlogEntryStatus()
		{
			this._BlogEntries = new EntitySet<BlogEntry>(new Action<BlogEntry>(this.attach_BlogEntries), new Action<BlogEntry>(this.detach_BlogEntries));
			OnCreated();
		}
		
		[Column(Storage="_BlogEntryStatusId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BlogEntryStatusId
		{
			get
			{
				return this._BlogEntryStatusId;
			}
			set
			{
				if ((this._BlogEntryStatusId != value))
				{
					this.OnBlogEntryStatusIdChanging(value);
					this.SendPropertyChanging();
					this._BlogEntryStatusId = value;
					this.SendPropertyChanged("BlogEntryStatusId");
					this.OnBlogEntryStatusIdChanged();
				}
			}
		}
		
		[Column(Storage="_BlogEntryStatusName", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string BlogEntryStatusName
		{
			get
			{
				return this._BlogEntryStatusName;
			}
			set
			{
				if ((this._BlogEntryStatusName != value))
				{
					this.OnBlogEntryStatusNameChanging(value);
					this.SendPropertyChanging();
					this._BlogEntryStatusName = value;
					this.SendPropertyChanged("BlogEntryStatusName");
					this.OnBlogEntryStatusNameChanged();
				}
			}
		}
		
		[Association(Name="BlogEntryStatus_BlogEntry", Storage="_BlogEntries", OtherKey="BlogEntryStatusId")]
		public EntitySet<BlogEntry> BlogEntries
		{
			get
			{
				return this._BlogEntries;
			}
			set
			{
				this._BlogEntries.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BlogEntries(BlogEntry entity)
		{
			this.SendPropertyChanging();
			entity.BlogEntryStatus = this;
		}
		
		private void detach_BlogEntries(BlogEntry entity)
		{
			this.SendPropertyChanging();
			entity.BlogEntryStatus = null;
		}
	}
	
	[Table(Name="svc.BlogEntryUrlMapping")]
	public partial class BlogEntryUrlMapping : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BlogEntryUrlMappingId;
		
		private int _BlogEntryId;
		
		private string _BlogEntryUrlMappingName;
		
		private EntityRef<BlogEntry> _BlogEntry;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBlogEntryUrlMappingIdChanging(int value);
    partial void OnBlogEntryUrlMappingIdChanged();
    partial void OnBlogEntryIdChanging(int value);
    partial void OnBlogEntryIdChanged();
    partial void OnBlogEntryUrlMappingNameChanging(string value);
    partial void OnBlogEntryUrlMappingNameChanged();
    #endregion
		
		public BlogEntryUrlMapping()
		{
			this._BlogEntry = default(EntityRef<BlogEntry>);
			OnCreated();
		}
		
		[Column(Storage="_BlogEntryUrlMappingId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BlogEntryUrlMappingId
		{
			get
			{
				return this._BlogEntryUrlMappingId;
			}
			set
			{
				if ((this._BlogEntryUrlMappingId != value))
				{
					this.OnBlogEntryUrlMappingIdChanging(value);
					this.SendPropertyChanging();
					this._BlogEntryUrlMappingId = value;
					this.SendPropertyChanged("BlogEntryUrlMappingId");
					this.OnBlogEntryUrlMappingIdChanged();
				}
			}
		}
		
		[Column(Storage="_BlogEntryId", DbType="Int NOT NULL")]
		public int BlogEntryId
		{
			get
			{
				return this._BlogEntryId;
			}
			set
			{
				if ((this._BlogEntryId != value))
				{
					if (this._BlogEntry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBlogEntryIdChanging(value);
					this.SendPropertyChanging();
					this._BlogEntryId = value;
					this.SendPropertyChanged("BlogEntryId");
					this.OnBlogEntryIdChanged();
				}
			}
		}
		
		[Column(Storage="_BlogEntryUrlMappingName", DbType="VarChar(2000)")]
		public string BlogEntryUrlMappingName
		{
			get
			{
				return this._BlogEntryUrlMappingName;
			}
			set
			{
				if ((this._BlogEntryUrlMappingName != value))
				{
					this.OnBlogEntryUrlMappingNameChanging(value);
					this.SendPropertyChanging();
					this._BlogEntryUrlMappingName = value;
					this.SendPropertyChanged("BlogEntryUrlMappingName");
					this.OnBlogEntryUrlMappingNameChanged();
				}
			}
		}
		
		[Association(Name="BlogEntry_BlogEntryUrlMapping", Storage="_BlogEntry", ThisKey="BlogEntryId", IsForeignKey=true)]
		public BlogEntry BlogEntry
		{
			get
			{
				return this._BlogEntry.Entity;
			}
			set
			{
				BlogEntry previousValue = this._BlogEntry.Entity;
				if (((previousValue != value) 
							|| (this._BlogEntry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BlogEntry.Entity = null;
						previousValue.BlogEntryUrlMappings.Remove(this);
					}
					this._BlogEntry.Entity = value;
					if ((value != null))
					{
						value.BlogEntryUrlMappings.Add(this);
						this._BlogEntryId = value.BlogEntryId;
					}
					else
					{
						this._BlogEntryId = default(int);
					}
					this.SendPropertyChanged("BlogEntry");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="svc.Comment")]
	public partial class Comment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CommentId;
		
		private string _CommentGuid;
		
		private int _BlogEntryId;
		
		private string _CommentText;
		
		private string _CommentAuthor;
		
		private string _CommentEmail;
		
		private System.DateTime _CommentPostDate;
		
		private bool _CommentModerated;
		
		private string _CommentWebsite;
		
		private EntityRef<BlogEntry> _BlogEntry;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCommentIdChanging(int value);
    partial void OnCommentIdChanged();
    partial void OnCommentGuidChanging(string value);
    partial void OnCommentGuidChanged();
    partial void OnBlogEntryIdChanging(int value);
    partial void OnBlogEntryIdChanged();
    partial void OnCommentTextChanging(string value);
    partial void OnCommentTextChanged();
    partial void OnCommentAuthorChanging(string value);
    partial void OnCommentAuthorChanged();
    partial void OnCommentEmailChanging(string value);
    partial void OnCommentEmailChanged();
    partial void OnCommentPostDateChanging(System.DateTime value);
    partial void OnCommentPostDateChanged();
    partial void OnCommentModeratedChanging(bool value);
    partial void OnCommentModeratedChanged();
    partial void OnCommentWebsiteChanging(string value);
    partial void OnCommentWebsiteChanged();
    #endregion
		
		public Comment()
		{
			this._BlogEntry = default(EntityRef<BlogEntry>);
			OnCreated();
		}
		
		[Column(Storage="_CommentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CommentId
		{
			get
			{
				return this._CommentId;
			}
			set
			{
				if ((this._CommentId != value))
				{
					this.OnCommentIdChanging(value);
					this.SendPropertyChanging();
					this._CommentId = value;
					this.SendPropertyChanged("CommentId");
					this.OnCommentIdChanged();
				}
			}
		}
		
		[Column(Storage="_CommentGuid", DbType="Char(36) NOT NULL", CanBeNull=false)]
		public string CommentGuid
		{
			get
			{
				return this._CommentGuid;
			}
			set
			{
				if ((this._CommentGuid != value))
				{
					this.OnCommentGuidChanging(value);
					this.SendPropertyChanging();
					this._CommentGuid = value;
					this.SendPropertyChanged("CommentGuid");
					this.OnCommentGuidChanged();
				}
			}
		}
		
		[Column(Storage="_BlogEntryId", DbType="Int NOT NULL")]
		public int BlogEntryId
		{
			get
			{
				return this._BlogEntryId;
			}
			set
			{
				if ((this._BlogEntryId != value))
				{
					if (this._BlogEntry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBlogEntryIdChanging(value);
					this.SendPropertyChanging();
					this._BlogEntryId = value;
					this.SendPropertyChanged("BlogEntryId");
					this.OnBlogEntryIdChanged();
				}
			}
		}
		
		[Column(Storage="_CommentText", DbType="VarChar(6000)")]
		public string CommentText
		{
			get
			{
				return this._CommentText;
			}
			set
			{
				if ((this._CommentText != value))
				{
					this.OnCommentTextChanging(value);
					this.SendPropertyChanging();
					this._CommentText = value;
					this.SendPropertyChanged("CommentText");
					this.OnCommentTextChanged();
				}
			}
		}
		
		[Column(Storage="_CommentAuthor", DbType="VarChar(100)")]
		public string CommentAuthor
		{
			get
			{
				return this._CommentAuthor;
			}
			set
			{
				if ((this._CommentAuthor != value))
				{
					this.OnCommentAuthorChanging(value);
					this.SendPropertyChanging();
					this._CommentAuthor = value;
					this.SendPropertyChanged("CommentAuthor");
					this.OnCommentAuthorChanged();
				}
			}
		}
		
		[Column(Storage="_CommentEmail", DbType="VarChar(200)")]
		public string CommentEmail
		{
			get
			{
				return this._CommentEmail;
			}
			set
			{
				if ((this._CommentEmail != value))
				{
					this.OnCommentEmailChanging(value);
					this.SendPropertyChanging();
					this._CommentEmail = value;
					this.SendPropertyChanged("CommentEmail");
					this.OnCommentEmailChanged();
				}
			}
		}
		
		[Column(Storage="_CommentPostDate", DbType="DateTime NOT NULL")]
		public System.DateTime CommentPostDate
		{
			get
			{
				return this._CommentPostDate;
			}
			set
			{
				if ((this._CommentPostDate != value))
				{
					this.OnCommentPostDateChanging(value);
					this.SendPropertyChanging();
					this._CommentPostDate = value;
					this.SendPropertyChanged("CommentPostDate");
					this.OnCommentPostDateChanged();
				}
			}
		}
		
		[Column(Storage="_CommentModerated", DbType="Bit NOT NULL")]
		public bool CommentModerated
		{
			get
			{
				return this._CommentModerated;
			}
			set
			{
				if ((this._CommentModerated != value))
				{
					this.OnCommentModeratedChanging(value);
					this.SendPropertyChanging();
					this._CommentModerated = value;
					this.SendPropertyChanged("CommentModerated");
					this.OnCommentModeratedChanged();
				}
			}
		}
		
		[Column(Storage="_CommentWebsite", DbType="VarChar(400)")]
		public string CommentWebsite
		{
			get
			{
				return this._CommentWebsite;
			}
			set
			{
				if ((this._CommentWebsite != value))
				{
					this.OnCommentWebsiteChanging(value);
					this.SendPropertyChanging();
					this._CommentWebsite = value;
					this.SendPropertyChanged("CommentWebsite");
					this.OnCommentWebsiteChanged();
				}
			}
		}
		
		[Association(Name="BlogEntry_Comment", Storage="_BlogEntry", ThisKey="BlogEntryId", IsForeignKey=true)]
		public BlogEntry BlogEntry
		{
			get
			{
				return this._BlogEntry.Entity;
			}
			set
			{
				BlogEntry previousValue = this._BlogEntry.Entity;
				if (((previousValue != value) 
							|| (this._BlogEntry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BlogEntry.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._BlogEntry.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._BlogEntryId = value.BlogEntryId;
					}
					else
					{
						this._BlogEntryId = default(int);
					}
					this.SendPropertyChanged("BlogEntry");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="svc.Label")]
	public partial class Label : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LabelId;
		
		private string _LabelGuid;
		
		private int _BlogId;
		
		private string _LabelTitle;
		
		private string _LabelFriendlyTitle;
		
		private string _LabelNetTitle;
		
		private EntitySet<LabelBlogEntry> _LabelBlogEntries;
		
		private EntityRef<Blog> _Blog;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLabelIdChanging(int value);
    partial void OnLabelIdChanged();
    partial void OnLabelGuidChanging(string value);
    partial void OnLabelGuidChanged();
    partial void OnBlogIdChanging(int value);
    partial void OnBlogIdChanged();
    partial void OnLabelTitleChanging(string value);
    partial void OnLabelTitleChanged();
    partial void OnLabelFriendlyTitleChanging(string value);
    partial void OnLabelFriendlyTitleChanged();
    partial void OnLabelNetTitleChanging(string value);
    partial void OnLabelNetTitleChanged();
    #endregion
		
		public Label()
		{
			this._LabelBlogEntries = new EntitySet<LabelBlogEntry>(new Action<LabelBlogEntry>(this.attach_LabelBlogEntries), new Action<LabelBlogEntry>(this.detach_LabelBlogEntries));
			this._Blog = default(EntityRef<Blog>);
			OnCreated();
		}
		
		[Column(Storage="_LabelId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LabelId
		{
			get
			{
				return this._LabelId;
			}
			set
			{
				if ((this._LabelId != value))
				{
					this.OnLabelIdChanging(value);
					this.SendPropertyChanging();
					this._LabelId = value;
					this.SendPropertyChanged("LabelId");
					this.OnLabelIdChanged();
				}
			}
		}
		
		[Column(Storage="_LabelGuid", DbType="Char(36) NOT NULL", CanBeNull=false)]
		public string LabelGuid
		{
			get
			{
				return this._LabelGuid;
			}
			set
			{
				if ((this._LabelGuid != value))
				{
					this.OnLabelGuidChanging(value);
					this.SendPropertyChanging();
					this._LabelGuid = value;
					this.SendPropertyChanged("LabelGuid");
					this.OnLabelGuidChanged();
				}
			}
		}
		
		[Column(Storage="_BlogId", DbType="Int NOT NULL")]
		public int BlogId
		{
			get
			{
				return this._BlogId;
			}
			set
			{
				if ((this._BlogId != value))
				{
					if (this._Blog.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBlogIdChanging(value);
					this.SendPropertyChanging();
					this._BlogId = value;
					this.SendPropertyChanged("BlogId");
					this.OnBlogIdChanged();
				}
			}
		}
		
		[Column(Storage="_LabelTitle", DbType="VarChar(200)")]
		public string LabelTitle
		{
			get
			{
				return this._LabelTitle;
			}
			set
			{
				if ((this._LabelTitle != value))
				{
					this.OnLabelTitleChanging(value);
					this.SendPropertyChanging();
					this._LabelTitle = value;
					this.SendPropertyChanged("LabelTitle");
					this.OnLabelTitleChanged();
				}
			}
		}
		
		[Column(Storage="_LabelFriendlyTitle", DbType="VarChar(200)")]
		public string LabelFriendlyTitle
		{
			get
			{
				return this._LabelFriendlyTitle;
			}
			set
			{
				if ((this._LabelFriendlyTitle != value))
				{
					this.OnLabelFriendlyTitleChanging(value);
					this.SendPropertyChanging();
					this._LabelFriendlyTitle = value;
					this.SendPropertyChanged("LabelFriendlyTitle");
					this.OnLabelFriendlyTitleChanged();
				}
			}
		}
		
		[Column(Storage="_LabelNetTitle", AutoSync=AutoSync.Always, DbType="VarChar(200)", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public string LabelNetTitle
		{
			get
			{
				return this._LabelNetTitle;
			}
			set
			{
				if ((this._LabelNetTitle != value))
				{
					this.OnLabelNetTitleChanging(value);
					this.SendPropertyChanging();
					this._LabelNetTitle = value;
					this.SendPropertyChanged("LabelNetTitle");
					this.OnLabelNetTitleChanged();
				}
			}
		}
		
		[Association(Name="Label_LabelBlogEntry", Storage="_LabelBlogEntries", OtherKey="LabelId")]
		public EntitySet<LabelBlogEntry> LabelBlogEntries
		{
			get
			{
				return this._LabelBlogEntries;
			}
			set
			{
				this._LabelBlogEntries.Assign(value);
			}
		}
		
		[Association(Name="Blog_Label", Storage="_Blog", ThisKey="BlogId", IsForeignKey=true)]
		public Blog Blog
		{
			get
			{
				return this._Blog.Entity;
			}
			set
			{
				Blog previousValue = this._Blog.Entity;
				if (((previousValue != value) 
							|| (this._Blog.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Blog.Entity = null;
						previousValue.Labels.Remove(this);
					}
					this._Blog.Entity = value;
					if ((value != null))
					{
						value.Labels.Add(this);
						this._BlogId = value.BlogId;
					}
					else
					{
						this._BlogId = default(int);
					}
					this.SendPropertyChanged("Blog");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LabelBlogEntries(LabelBlogEntry entity)
		{
			this.SendPropertyChanging();
			entity.Label = this;
		}
		
		private void detach_LabelBlogEntries(LabelBlogEntry entity)
		{
			this.SendPropertyChanging();
			entity.Label = null;
		}
	}
	
	[Table(Name="svc.LabelBlogEntry")]
	public partial class LabelBlogEntry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LabelId;
		
		private int _BlogEntryId;
		
		private EntityRef<BlogEntry> _BlogEntry;
		
		private EntityRef<Label> _Label;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLabelIdChanging(int value);
    partial void OnLabelIdChanged();
    partial void OnBlogEntryIdChanging(int value);
    partial void OnBlogEntryIdChanged();
    #endregion
		
		public LabelBlogEntry()
		{
			this._BlogEntry = default(EntityRef<BlogEntry>);
			this._Label = default(EntityRef<Label>);
			OnCreated();
		}
		
		[Column(Storage="_LabelId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LabelId
		{
			get
			{
				return this._LabelId;
			}
			set
			{
				if ((this._LabelId != value))
				{
					if (this._Label.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLabelIdChanging(value);
					this.SendPropertyChanging();
					this._LabelId = value;
					this.SendPropertyChanged("LabelId");
					this.OnLabelIdChanged();
				}
			}
		}
		
		[Column(Storage="_BlogEntryId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BlogEntryId
		{
			get
			{
				return this._BlogEntryId;
			}
			set
			{
				if ((this._BlogEntryId != value))
				{
					if (this._BlogEntry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBlogEntryIdChanging(value);
					this.SendPropertyChanging();
					this._BlogEntryId = value;
					this.SendPropertyChanged("BlogEntryId");
					this.OnBlogEntryIdChanged();
				}
			}
		}
		
		[Association(Name="BlogEntry_LabelBlogEntry", Storage="_BlogEntry", ThisKey="BlogEntryId", IsForeignKey=true)]
		public BlogEntry BlogEntry
		{
			get
			{
				return this._BlogEntry.Entity;
			}
			set
			{
				BlogEntry previousValue = this._BlogEntry.Entity;
				if (((previousValue != value) 
							|| (this._BlogEntry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BlogEntry.Entity = null;
						previousValue.LabelBlogEntries.Remove(this);
					}
					this._BlogEntry.Entity = value;
					if ((value != null))
					{
						value.LabelBlogEntries.Add(this);
						this._BlogEntryId = value.BlogEntryId;
					}
					else
					{
						this._BlogEntryId = default(int);
					}
					this.SendPropertyChanged("BlogEntry");
				}
			}
		}
		
		[Association(Name="Label_LabelBlogEntry", Storage="_Label", ThisKey="LabelId", IsForeignKey=true)]
		public Label Label
		{
			get
			{
				return this._Label.Entity;
			}
			set
			{
				Label previousValue = this._Label.Entity;
				if (((previousValue != value) 
							|| (this._Label.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Label.Entity = null;
						previousValue.LabelBlogEntries.Remove(this);
					}
					this._Label.Entity = value;
					if ((value != null))
					{
						value.LabelBlogEntries.Add(this);
						this._LabelId = value.LabelId;
					}
					else
					{
						this._LabelId = default(int);
					}
					this.SendPropertyChanged("Label");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="svc.BlogImage")]
	public partial class BlogImage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BlogImageId;
		
		private System.Nullable<int> _BlogId;
		
		private string _BlogImageContentType;
		
		private string _BlogImageGuid;
		
		private System.Data.Linq.Binary _BlogImageData;
		
		private EntityRef<Blog> _Blog;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBlogImageIdChanging(int value);
    partial void OnBlogImageIdChanged();
    partial void OnBlogIdChanging(System.Nullable<int> value);
    partial void OnBlogIdChanged();
    partial void OnBlogImageContentTypeChanging(string value);
    partial void OnBlogImageContentTypeChanged();
    partial void OnBlogImageGuidChanging(string value);
    partial void OnBlogImageGuidChanged();
    partial void OnBlogImageDataChanging(System.Data.Linq.Binary value);
    partial void OnBlogImageDataChanged();
    #endregion
		
		public BlogImage()
		{
			this._Blog = default(EntityRef<Blog>);
			OnCreated();
		}
		
		[Column(Storage="_BlogImageId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BlogImageId
		{
			get
			{
				return this._BlogImageId;
			}
			set
			{
				if ((this._BlogImageId != value))
				{
					this.OnBlogImageIdChanging(value);
					this.SendPropertyChanging();
					this._BlogImageId = value;
					this.SendPropertyChanged("BlogImageId");
					this.OnBlogImageIdChanged();
				}
			}
		}
		
		[Column(Storage="_BlogId", DbType="Int")]
		public System.Nullable<int> BlogId
		{
			get
			{
				return this._BlogId;
			}
			set
			{
				if ((this._BlogId != value))
				{
					if (this._Blog.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBlogIdChanging(value);
					this.SendPropertyChanging();
					this._BlogId = value;
					this.SendPropertyChanged("BlogId");
					this.OnBlogIdChanged();
				}
			}
		}
		
		[Column(Storage="_BlogImageContentType", DbType="VarChar(50)")]
		public string BlogImageContentType
		{
			get
			{
				return this._BlogImageContentType;
			}
			set
			{
				if ((this._BlogImageContentType != value))
				{
					this.OnBlogImageContentTypeChanging(value);
					this.SendPropertyChanging();
					this._BlogImageContentType = value;
					this.SendPropertyChanged("BlogImageContentType");
					this.OnBlogImageContentTypeChanged();
				}
			}
		}
		
		[Column(Storage="_BlogImageGuid", DbType="Char(36) NOT NULL", CanBeNull=false)]
		public string BlogImageGuid
		{
			get
			{
				return this._BlogImageGuid;
			}
			set
			{
				if ((this._BlogImageGuid != value))
				{
					this.OnBlogImageGuidChanging(value);
					this.SendPropertyChanging();
					this._BlogImageGuid = value;
					this.SendPropertyChanged("BlogImageGuid");
					this.OnBlogImageGuidChanged();
				}
			}
		}
		
		[Column(Storage="_BlogImageData", DbType="VarBinary(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary BlogImageData
		{
			get
			{
				return this._BlogImageData;
			}
			set
			{
				if ((this._BlogImageData != value))
				{
					this.OnBlogImageDataChanging(value);
					this.SendPropertyChanging();
					this._BlogImageData = value;
					this.SendPropertyChanged("BlogImageData");
					this.OnBlogImageDataChanged();
				}
			}
		}
		
		[Association(Name="Blog_BlogImage", Storage="_Blog", ThisKey="BlogId", IsForeignKey=true)]
		public Blog Blog
		{
			get
			{
				return this._Blog.Entity;
			}
			set
			{
				Blog previousValue = this._Blog.Entity;
				if (((previousValue != value) 
							|| (this._Blog.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Blog.Entity = null;
						previousValue.BlogImages.Remove(this);
					}
					this._Blog.Entity = value;
					if ((value != null))
					{
						value.BlogImages.Add(this);
						this._BlogId = value.BlogId;
					}
					else
					{
						this._BlogId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Blog");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="svc.BlogEntryType")]
	public partial class BlogEntryType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BlogEntryTypeId;
		
		private string _BlogEntryTypeName;
		
		private string _BlogEntryTypeExtra;
		
		private string _BlogEntryTypeGuid;
		
		private EntitySet<BlogEntry> _BlogEntries;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBlogEntryTypeIdChanging(int value);
    partial void OnBlogEntryTypeIdChanged();
    partial void OnBlogEntryTypeNameChanging(string value);
    partial void OnBlogEntryTypeNameChanged();
    partial void OnBlogEntryTypeExtraChanging(string value);
    partial void OnBlogEntryTypeExtraChanged();
    partial void OnBlogEntryTypeGuidChanging(string value);
    partial void OnBlogEntryTypeGuidChanged();
    #endregion
		
		public BlogEntryType()
		{
			this._BlogEntries = new EntitySet<BlogEntry>(new Action<BlogEntry>(this.attach_BlogEntries), new Action<BlogEntry>(this.detach_BlogEntries));
			OnCreated();
		}
		
		[Column(Storage="_BlogEntryTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BlogEntryTypeId
		{
			get
			{
				return this._BlogEntryTypeId;
			}
			set
			{
				if ((this._BlogEntryTypeId != value))
				{
					this.OnBlogEntryTypeIdChanging(value);
					this.SendPropertyChanging();
					this._BlogEntryTypeId = value;
					this.SendPropertyChanged("BlogEntryTypeId");
					this.OnBlogEntryTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_BlogEntryTypeName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string BlogEntryTypeName
		{
			get
			{
				return this._BlogEntryTypeName;
			}
			set
			{
				if ((this._BlogEntryTypeName != value))
				{
					this.OnBlogEntryTypeNameChanging(value);
					this.SendPropertyChanging();
					this._BlogEntryTypeName = value;
					this.SendPropertyChanged("BlogEntryTypeName");
					this.OnBlogEntryTypeNameChanged();
				}
			}
		}
		
		[Column(Storage="_BlogEntryTypeExtra", DbType="NVarChar(1000)")]
		public string BlogEntryTypeExtra
		{
			get
			{
				return this._BlogEntryTypeExtra;
			}
			set
			{
				if ((this._BlogEntryTypeExtra != value))
				{
					this.OnBlogEntryTypeExtraChanging(value);
					this.SendPropertyChanging();
					this._BlogEntryTypeExtra = value;
					this.SendPropertyChanged("BlogEntryTypeExtra");
					this.OnBlogEntryTypeExtraChanged();
				}
			}
		}
		
		[Column(Storage="_BlogEntryTypeGuid", DbType="Char(36)", CanBeNull=false)]
		public string BlogEntryTypeGuid
		{
			get
			{
				return this._BlogEntryTypeGuid;
			}
			set
			{
				if ((this._BlogEntryTypeGuid != value))
				{
					this.OnBlogEntryTypeGuidChanging(value);
					this.SendPropertyChanging();
					this._BlogEntryTypeGuid = value;
					this.SendPropertyChanged("BlogEntryTypeGuid");
					this.OnBlogEntryTypeGuidChanged();
				}
			}
		}
		
		[Association(Name="BlogEntryType_BlogEntry", Storage="_BlogEntries", OtherKey="BlogEntryTypeId")]
		public EntitySet<BlogEntry> BlogEntries
		{
			get
			{
				return this._BlogEntries;
			}
			set
			{
				this._BlogEntries.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BlogEntries(BlogEntry entity)
		{
			this.SendPropertyChanging();
			entity.BlogEntryType = this;
		}
		
		private void detach_BlogEntries(BlogEntry entity)
		{
			this.SendPropertyChanging();
			entity.BlogEntryType = null;
		}
	}
	
	public partial class GetArchivedEntryListResult
	{
		
		private System.Nullable<int> _Count;
		
		private string _Month;
		
		public GetArchivedEntryListResult()
		{
		}
		
		[Column(Storage="_Count", DbType="Int")]
		public System.Nullable<int> Count
		{
			get
			{
				return this._Count;
			}
			set
			{
				if ((this._Count != value))
				{
					this._Count = value;
				}
			}
		}
		
		[Column(Storage="_Month", DbType="VarChar(11)")]
		public string Month
		{
			get
			{
				return this._Month;
			}
			set
			{
				if ((this._Month != value))
				{
					this._Month = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
