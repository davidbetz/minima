#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Minima.Web.Data.Context
{
    using System.Data.Linq.Mapping;


    [System.Data.Linq.Mapping.DatabaseAttribute(Name = "Minima")]
	public partial class MinimaWebLINQDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTrace(Minima.Web.Data.Entity.Trace instance);
    partial void UpdateTrace(Minima.Web.Data.Entity.Trace instance);
    partial void DeleteTrace(Minima.Web.Data.Entity.Trace instance);
    partial void InsertTraceType(Minima.Web.Data.Entity.TraceType instance);
    partial void UpdateTraceType(Minima.Web.Data.Entity.TraceType instance);
    partial void DeleteTraceType(Minima.Web.Data.Entity.TraceType instance);
    partial void InsertAccess(Minima.Web.Data.Entity.Access instance);
    partial void UpdateAccess(Minima.Web.Data.Entity.Access instance);
    partial void DeleteAccess(Minima.Web.Data.Entity.Access instance);
    partial void InsertFileMapping(Minima.Web.Data.Entity.FileMapping instance);
    partial void UpdateFileMapping(Minima.Web.Data.Entity.FileMapping instance);
    partial void DeleteFileMapping(Minima.Web.Data.Entity.FileMapping instance);
    partial void InsertBlogEntryActivity(Minima.Web.Data.Entity.BlogEntryActivity instance);
    partial void UpdateBlogEntryActivity(Minima.Web.Data.Entity.BlogEntryActivity instance);
    partial void DeleteBlogEntryActivity(Minima.Web.Data.Entity.BlogEntryActivity instance);
    partial void InsertBlogEntryActivityType(Minima.Web.Data.Entity.BlogEntryActivityType instance);
    partial void UpdateBlogEntryActivityType(Minima.Web.Data.Entity.BlogEntryActivityType instance);
    partial void DeleteBlogEntryActivityType(Minima.Web.Data.Entity.BlogEntryActivityType instance);
    #endregion
		
		public MinimaWebLINQDataContext() : 
				base(global::Minima.Web.Properties.Settings.Default.MinimaConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MinimaWebLINQDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MinimaWebLINQDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MinimaWebLINQDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MinimaWebLINQDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Minima.Web.Data.Entity.Trace> Traces
		{
			get
			{
				return this.GetTable<Minima.Web.Data.Entity.Trace>();
			}
		}
		
		public System.Data.Linq.Table<Minima.Web.Data.Entity.TraceType> TraceTypes
		{
			get
			{
				return this.GetTable<Minima.Web.Data.Entity.TraceType>();
			}
		}
		
		public System.Data.Linq.Table<Minima.Web.Data.Entity.Access> Accesses
		{
			get
			{
				return this.GetTable<Minima.Web.Data.Entity.Access>();
			}
		}
		
		public System.Data.Linq.Table<Minima.Web.Data.Entity.FileMapping> FileMappings
		{
			get
			{
				return this.GetTable<Minima.Web.Data.Entity.FileMapping>();
			}
		}
		
		public System.Data.Linq.Table<Minima.Web.Data.Entity.BlogEntryActivity> BlogEntryActivities
		{
			get
			{
				return this.GetTable<Minima.Web.Data.Entity.BlogEntryActivity>();
			}
		}
		
		public System.Data.Linq.Table<Minima.Web.Data.Entity.BlogEntryActivityType> BlogEntryActivityTypes
		{
			get
			{
				return this.GetTable<Minima.Web.Data.Entity.BlogEntryActivityType>();
			}
		}
	}
}
namespace Minima.Web.Data.Entity
{
    using System;
    using System.ComponentModel;
    using System.Data.Linq;
    using System.Data.Linq.Mapping;
	
	
	[Table(Name="web.Trace")]
	public partial class Trace : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TraceId;
		
		private int _TraceTypeId;
		
		private String _TraceAddress;
		
		private String _TraceUrl;
		
		private String _TraceUserAgent;
		
		private String _TraceMessage;
		
		private String _TraceStackTrace;
		
		private String _TraceExtra;
		
		private System.Nullable<System.DateTime> _TraceDateTime;
		
		private EntityRef<TraceType> _TraceType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTraceIdChanging(Int32 value);
    partial void OnTraceIdChanged();
    partial void OnTraceTypeIdChanging(Int32 value);
    partial void OnTraceTypeIdChanged();
    partial void OnTraceAddressChanging(string value);
    partial void OnTraceAddressChanged();
    partial void OnTraceUrlChanging(string value);
    partial void OnTraceUrlChanged();
    partial void OnTraceUserAgentChanging(string value);
    partial void OnTraceUserAgentChanged();
    partial void OnTraceMessageChanging(string value);
    partial void OnTraceMessageChanged();
    partial void OnTraceStackTraceChanging(string value);
    partial void OnTraceStackTraceChanged();
    partial void OnTraceExtraChanging(string value);
    partial void OnTraceExtraChanged();
    partial void OnTraceDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnTraceDateTimeChanged();
    #endregion
		
		public Trace()
		{
			this._TraceType = default(EntityRef<TraceType>);
			OnCreated();
		}
		
		[Column(Storage="_TraceId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TraceId
		{
			get
			{
				return this._TraceId;
			}
			set
			{
				if ((this._TraceId != value))
				{
					this.OnTraceIdChanging(value);
					this.SendPropertyChanging();
					this._TraceId = value;
					this.SendPropertyChanged("TraceId");
					this.OnTraceIdChanged();
				}
			}
		}
		
		[Column(Storage="_TraceTypeId", DbType="Int NOT NULL")]
		public int TraceTypeId
		{
			get
			{
				return this._TraceTypeId;
			}
			set
			{
				if ((this._TraceTypeId != value))
				{
					if (this._TraceType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTraceTypeIdChanging(value);
					this.SendPropertyChanging();
					this._TraceTypeId = value;
					this.SendPropertyChanged("TraceTypeId");
					this.OnTraceTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_TraceAddress", DbType="Char(15)")]
		public String TraceAddress
		{
			get
			{
				return this._TraceAddress;
			}
			set
			{
				if ((this._TraceAddress != value))
				{
					this.OnTraceAddressChanging(value);
					this.SendPropertyChanging();
					this._TraceAddress = value;
					this.SendPropertyChanged("TraceAddress");
					this.OnTraceAddressChanged();
				}
			}
		}
		
		[Column(Storage="_TraceUrl", DbType="VarChar(1000)")]
		public String TraceUrl
		{
			get
			{
				return this._TraceUrl;
			}
			set
			{
				if ((this._TraceUrl != value))
				{
					this.OnTraceUrlChanging(value);
					this.SendPropertyChanging();
					this._TraceUrl = value;
					this.SendPropertyChanged("TraceUrl");
					this.OnTraceUrlChanged();
				}
			}
		}
		
		[Column(Storage="_TraceUserAgent", DbType="VarChar(300)")]
		public String TraceUserAgent
		{
			get
			{
				return this._TraceUserAgent;
			}
			set
			{
				if ((this._TraceUserAgent != value))
				{
					this.OnTraceUserAgentChanging(value);
					this.SendPropertyChanging();
					this._TraceUserAgent = value;
					this.SendPropertyChanged("TraceUserAgent");
					this.OnTraceUserAgentChanged();
				}
			}
		}
		
		[Column(Storage="_TraceMessage", DbType="VarChar(2000) NOT NULL", CanBeNull=false)]
		public String TraceMessage
		{
			get
			{
				return this._TraceMessage;
			}
			set
			{
				if ((this._TraceMessage != value))
				{
					this.OnTraceMessageChanging(value);
					this.SendPropertyChanging();
					this._TraceMessage = value;
					this.SendPropertyChanged("TraceMessage");
					this.OnTraceMessageChanged();
				}
			}
		}
		
		[Column(Storage="_TraceStackTrace", DbType="VarChar(2000)")]
		public String TraceStackTrace
		{
			get
			{
				return this._TraceStackTrace;
			}
			set
			{
				if ((this._TraceStackTrace != value))
				{
					this.OnTraceStackTraceChanging(value);
					this.SendPropertyChanging();
					this._TraceStackTrace = value;
					this.SendPropertyChanged("TraceStackTrace");
					this.OnTraceStackTraceChanged();
				}
			}
		}
		
		[Column(Storage="_TraceExtra", DbType="VarChar(MAX)")]
		public String TraceExtra
		{
			get
			{
				return this._TraceExtra;
			}
			set
			{
				if ((this._TraceExtra != value))
				{
					this.OnTraceExtraChanging(value);
					this.SendPropertyChanging();
					this._TraceExtra = value;
					this.SendPropertyChanged("TraceExtra");
					this.OnTraceExtraChanged();
				}
			}
		}
		
		[Column(Storage="_TraceDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> TraceDateTime
		{
			get
			{
				return this._TraceDateTime;
			}
			set
			{
				if ((this._TraceDateTime != value))
				{
					this.OnTraceDateTimeChanging(value);
					this.SendPropertyChanging();
					this._TraceDateTime = value;
					this.SendPropertyChanged("TraceDateTime");
					this.OnTraceDateTimeChanged();
				}
			}
		}
		
		[Association(Name="TraceType_Trace", Storage="_TraceType", ThisKey="TraceTypeId", IsForeignKey=true)]
		public TraceType TraceType
		{
			get
			{
				return this._TraceType.Entity;
			}
			set
			{
				TraceType previousValue = this._TraceType.Entity;
				if (((previousValue != value) 
							|| (this._TraceType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TraceType.Entity = null;
						previousValue.Traces.Remove(this);
					}
					this._TraceType.Entity = value;
					if ((value != null))
					{
						value.Traces.Add(this);
						this._TraceTypeId = value.TraceTypeId;
					}
					else
					{
						this._TraceTypeId = default(Int32);
					}
					this.SendPropertyChanged("TraceType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="web.TraceType")]
	public partial class TraceType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TraceTypeId;
		
		private String _TraceTypeName;
		
		private EntitySet<Trace> _Traces;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTraceTypeIdChanging(Int32 value);
    partial void OnTraceTypeIdChanged();
    partial void OnTraceTypeNameChanging(string value);
    partial void OnTraceTypeNameChanged();
    #endregion
		
		public TraceType()
		{
			this._Traces = new EntitySet<Trace>(new Action<Trace>(this.attach_Traces), new Action<Trace>(this.detach_Traces));
			OnCreated();
		}
		
		[Column(Storage="_TraceTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TraceTypeId
		{
			get
			{
				return this._TraceTypeId;
			}
			set
			{
				if ((this._TraceTypeId != value))
				{
					this.OnTraceTypeIdChanging(value);
					this.SendPropertyChanging();
					this._TraceTypeId = value;
					this.SendPropertyChanged("TraceTypeId");
					this.OnTraceTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_TraceTypeName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public String TraceTypeName
		{
			get
			{
				return this._TraceTypeName;
			}
			set
			{
				if ((this._TraceTypeName != value))
				{
					this.OnTraceTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TraceTypeName = value;
					this.SendPropertyChanged("TraceTypeName");
					this.OnTraceTypeNameChanged();
				}
			}
		}
		
		[Association(Name="TraceType_Trace", Storage="_Traces", OtherKey="TraceTypeId")]
		public EntitySet<Trace> Traces
		{
			get
			{
				return this._Traces;
			}
			set
			{
				this._Traces.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Traces(Trace entity)
		{
			this.SendPropertyChanging();
			entity.TraceType = this;
		}
		
		private void detach_Traces(Trace entity)
		{
			this.SendPropertyChanging();
			entity.TraceType = null;
		}
	}
	
	[Table(Name="web.Access")]
	public partial class Access : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AccessId;
		
		private char _AccessType;
		
		private String _AccessContent;
		
		private String _AccessOutputMessage;
		
		private String _AccessHttpForward;
		
		private bool _AccessEnabled;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccessIdChanging(Int32 value);
    partial void OnAccessIdChanged();
    partial void OnAccessTypeChanging(char value);
    partial void OnAccessTypeChanged();
    partial void OnAccessContentChanging(string value);
    partial void OnAccessContentChanged();
    partial void OnAccessOutputMessageChanging(string value);
    partial void OnAccessOutputMessageChanged();
    partial void OnAccessHttpForwardChanging(string value);
    partial void OnAccessHttpForwardChanged();
    partial void OnAccessEnabledChanging(bool value);
    partial void OnAccessEnabledChanged();
    #endregion
		
		public Access()
		{
			OnCreated();
		}
		
		[Column(Storage="_AccessId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AccessId
		{
			get
			{
				return this._AccessId;
			}
			set
			{
				if ((this._AccessId != value))
				{
					this.OnAccessIdChanging(value);
					this.SendPropertyChanging();
					this._AccessId = value;
					this.SendPropertyChanged("AccessId");
					this.OnAccessIdChanged();
				}
			}
		}
		
		[Column(Storage="_AccessType", DbType="Char(1) NOT NULL")]
		public char AccessType
		{
			get
			{
				return this._AccessType;
			}
			set
			{
				if ((this._AccessType != value))
				{
					this.OnAccessTypeChanging(value);
					this.SendPropertyChanging();
					this._AccessType = value;
					this.SendPropertyChanged("AccessType");
					this.OnAccessTypeChanged();
				}
			}
		}
		
		[Column(Storage="_AccessContent", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public String AccessContent
		{
			get
			{
				return this._AccessContent;
			}
			set
			{
				if ((this._AccessContent != value))
				{
					this.OnAccessContentChanging(value);
					this.SendPropertyChanging();
					this._AccessContent = value;
					this.SendPropertyChanged("AccessContent");
					this.OnAccessContentChanged();
				}
			}
		}
		
		[Column(Storage="_AccessOutputMessage", DbType="NVarChar(1000)")]
		public String AccessOutputMessage
		{
			get
			{
				return this._AccessOutputMessage;
			}
			set
			{
				if ((this._AccessOutputMessage != value))
				{
					this.OnAccessOutputMessageChanging(value);
					this.SendPropertyChanging();
					this._AccessOutputMessage = value;
					this.SendPropertyChanged("AccessOutputMessage");
					this.OnAccessOutputMessageChanged();
				}
			}
		}
		
		[Column(Storage="_AccessHttpForward", DbType="VarChar(400)")]
		public String AccessHttpForward
		{
			get
			{
				return this._AccessHttpForward;
			}
			set
			{
				if ((this._AccessHttpForward != value))
				{
					this.OnAccessHttpForwardChanging(value);
					this.SendPropertyChanging();
					this._AccessHttpForward = value;
					this.SendPropertyChanged("AccessHttpForward");
					this.OnAccessHttpForwardChanged();
				}
			}
		}
		
		[Column(Storage="_AccessEnabled", DbType="Bit NOT NULL")]
		public bool AccessEnabled
		{
			get
			{
				return this._AccessEnabled;
			}
			set
			{
				if ((this._AccessEnabled != value))
				{
					this.OnAccessEnabledChanging(value);
					this.SendPropertyChanging();
					this._AccessEnabled = value;
					this.SendPropertyChanged("AccessEnabled");
					this.OnAccessEnabledChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="web.FileMapping")]
	public partial class FileMapping : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FileMappingId;
		
		private int _BlogId;
		
		private String _FileMappingUrl;
		
		private String _FileMappingName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFileMappingIdChanging(Int32 value);
    partial void OnFileMappingIdChanged();
    partial void OnBlogIdChanging(Int32 value);
    partial void OnBlogIdChanged();
    partial void OnFileMappingUrlChanging(string value);
    partial void OnFileMappingUrlChanged();
    partial void OnFileMappingNameChanging(string value);
    partial void OnFileMappingNameChanged();
    #endregion
		
		public FileMapping()
		{
			OnCreated();
		}
		
		[Column(Storage="_FileMappingId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FileMappingId
		{
			get
			{
				return this._FileMappingId;
			}
			set
			{
				if ((this._FileMappingId != value))
				{
					this.OnFileMappingIdChanging(value);
					this.SendPropertyChanging();
					this._FileMappingId = value;
					this.SendPropertyChanged("FileMappingId");
					this.OnFileMappingIdChanged();
				}
			}
		}
		
		[Column(Storage="_BlogId", DbType="Int NOT NULL")]
		public int BlogId
		{
			get
			{
				return this._BlogId;
			}
			set
			{
				if ((this._BlogId != value))
				{
					this.OnBlogIdChanging(value);
					this.SendPropertyChanging();
					this._BlogId = value;
					this.SendPropertyChanged("BlogId");
					this.OnBlogIdChanged();
				}
			}
		}
		
		[Column(Storage="_FileMappingUrl", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public String FileMappingUrl
		{
			get
			{
				return this._FileMappingUrl;
			}
			set
			{
				if ((this._FileMappingUrl != value))
				{
					this.OnFileMappingUrlChanging(value);
					this.SendPropertyChanging();
					this._FileMappingUrl = value;
					this.SendPropertyChanged("FileMappingUrl");
					this.OnFileMappingUrlChanged();
				}
			}
		}
		
		[Column(Storage="_FileMappingName", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public String FileMappingName
		{
			get
			{
				return this._FileMappingName;
			}
			set
			{
				if ((this._FileMappingName != value))
				{
					this.OnFileMappingNameChanging(value);
					this.SendPropertyChanging();
					this._FileMappingName = value;
					this.SendPropertyChanged("FileMappingName");
					this.OnFileMappingNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="web.BlogEntryActivity")]
	public partial class BlogEntryActivity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BlogEntryActivityId;
		
		private int _BlogEntryActivityTypeId;
		
		private System.DateTime _BlogEntryActivityTime;
		
		private String _BlogEntryActivityAddress;
		
		private String _BlogEntryActivityBrowser;
		
		private String _BlogEntryActivityHostName;
		
		private String _BlogEntryActivitySessionId;
		
		private String _BlogEntryActivityExtra;
		
		private EntityRef<BlogEntryActivityType> _BlogEntryActivityType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBlogEntryActivityIdChanging(Int32 value);
    partial void OnBlogEntryActivityIdChanged();
    partial void OnBlogEntryActivityTypeIdChanging(Int32 value);
    partial void OnBlogEntryActivityTypeIdChanged();
    partial void OnBlogEntryActivityTimeChanging(System.DateTime value);
    partial void OnBlogEntryActivityTimeChanged();
    partial void OnBlogEntryActivityAddressChanging(string value);
    partial void OnBlogEntryActivityAddressChanged();
    partial void OnBlogEntryActivityBrowserChanging(string value);
    partial void OnBlogEntryActivityBrowserChanged();
    partial void OnBlogEntryActivityHostNameChanging(string value);
    partial void OnBlogEntryActivityHostNameChanged();
    partial void OnBlogEntryActivitySessionIdChanging(string value);
    partial void OnBlogEntryActivitySessionIdChanged();
    partial void OnBlogEntryActivityExtraChanging(string value);
    partial void OnBlogEntryActivityExtraChanged();
    #endregion
		
		public BlogEntryActivity()
		{
			this._BlogEntryActivityType = default(EntityRef<BlogEntryActivityType>);
			OnCreated();
		}
		
		[Column(Storage="_BlogEntryActivityId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BlogEntryActivityId
		{
			get
			{
				return this._BlogEntryActivityId;
			}
			set
			{
				if ((this._BlogEntryActivityId != value))
				{
					this.OnBlogEntryActivityIdChanging(value);
					this.SendPropertyChanging();
					this._BlogEntryActivityId = value;
					this.SendPropertyChanged("BlogEntryActivityId");
					this.OnBlogEntryActivityIdChanged();
				}
			}
		}
		
		[Column(Storage="_BlogEntryActivityTypeId", DbType="Int NOT NULL")]
		public int BlogEntryActivityTypeId
		{
			get
			{
				return this._BlogEntryActivityTypeId;
			}
			set
			{
				if ((this._BlogEntryActivityTypeId != value))
				{
					if (this._BlogEntryActivityType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBlogEntryActivityTypeIdChanging(value);
					this.SendPropertyChanging();
					this._BlogEntryActivityTypeId = value;
					this.SendPropertyChanged("BlogEntryActivityTypeId");
					this.OnBlogEntryActivityTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_BlogEntryActivityTime", DbType="DateTime NOT NULL")]
		public System.DateTime BlogEntryActivityTime
		{
			get
			{
				return this._BlogEntryActivityTime;
			}
			set
			{
				if ((this._BlogEntryActivityTime != value))
				{
					this.OnBlogEntryActivityTimeChanging(value);
					this.SendPropertyChanging();
					this._BlogEntryActivityTime = value;
					this.SendPropertyChanged("BlogEntryActivityTime");
					this.OnBlogEntryActivityTimeChanged();
				}
			}
		}
		
		[Column(Storage="_BlogEntryActivityAddress", DbType="Char(15)")]
		public String BlogEntryActivityAddress
		{
			get
			{
				return this._BlogEntryActivityAddress;
			}
			set
			{
				if ((this._BlogEntryActivityAddress != value))
				{
					this.OnBlogEntryActivityAddressChanging(value);
					this.SendPropertyChanging();
					this._BlogEntryActivityAddress = value;
					this.SendPropertyChanged("BlogEntryActivityAddress");
					this.OnBlogEntryActivityAddressChanged();
				}
			}
		}
		
		[Column(Storage="_BlogEntryActivityBrowser", DbType="VarChar(1000)")]
		public String BlogEntryActivityBrowser
		{
			get
			{
				return this._BlogEntryActivityBrowser;
			}
			set
			{
				if ((this._BlogEntryActivityBrowser != value))
				{
					this.OnBlogEntryActivityBrowserChanging(value);
					this.SendPropertyChanging();
					this._BlogEntryActivityBrowser = value;
					this.SendPropertyChanged("BlogEntryActivityBrowser");
					this.OnBlogEntryActivityBrowserChanged();
				}
			}
		}
		
		[Column(Storage="_BlogEntryActivityHostName", DbType="VarChar(500)")]
		public String BlogEntryActivityHostName
		{
			get
			{
				return this._BlogEntryActivityHostName;
			}
			set
			{
				if ((this._BlogEntryActivityHostName != value))
				{
					this.OnBlogEntryActivityHostNameChanging(value);
					this.SendPropertyChanging();
					this._BlogEntryActivityHostName = value;
					this.SendPropertyChanged("BlogEntryActivityHostName");
					this.OnBlogEntryActivityHostNameChanged();
				}
			}
		}
		
		[Column(Storage="_BlogEntryActivitySessionId", DbType="VarChar(500)")]
		public String BlogEntryActivitySessionId
		{
			get
			{
				return this._BlogEntryActivitySessionId;
			}
			set
			{
				if ((this._BlogEntryActivitySessionId != value))
				{
					this.OnBlogEntryActivitySessionIdChanging(value);
					this.SendPropertyChanging();
					this._BlogEntryActivitySessionId = value;
					this.SendPropertyChanged("BlogEntryActivitySessionId");
					this.OnBlogEntryActivitySessionIdChanged();
				}
			}
		}
		
		[Column(Storage="_BlogEntryActivityExtra", DbType="VarChar(1000)")]
		public String BlogEntryActivityExtra
		{
			get
			{
				return this._BlogEntryActivityExtra;
			}
			set
			{
				if ((this._BlogEntryActivityExtra != value))
				{
					this.OnBlogEntryActivityExtraChanging(value);
					this.SendPropertyChanging();
					this._BlogEntryActivityExtra = value;
					this.SendPropertyChanged("BlogEntryActivityExtra");
					this.OnBlogEntryActivityExtraChanged();
				}
			}
		}
		
		[Association(Name="BlogEntryActivityType_BlogEntryActivity", Storage="_BlogEntryActivityType", ThisKey="BlogEntryActivityTypeId", IsForeignKey=true)]
		public BlogEntryActivityType BlogEntryActivityType
		{
			get
			{
				return this._BlogEntryActivityType.Entity;
			}
			set
			{
				BlogEntryActivityType previousValue = this._BlogEntryActivityType.Entity;
				if (((previousValue != value) 
							|| (this._BlogEntryActivityType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BlogEntryActivityType.Entity = null;
						previousValue.BlogEntryActivities.Remove(this);
					}
					this._BlogEntryActivityType.Entity = value;
					if ((value != null))
					{
						value.BlogEntryActivities.Add(this);
						this._BlogEntryActivityTypeId = value.BlogEntryActivityTypeId;
					}
					else
					{
						this._BlogEntryActivityTypeId = default(Int32);
					}
					this.SendPropertyChanged("BlogEntryActivityType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="web.BlogEntryActivityType")]
	public partial class BlogEntryActivityType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BlogEntryActivityTypeId;
		
		private String _BlogEntryActivityTypeName;
		
		private EntitySet<BlogEntryActivity> _BlogEntryActivities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBlogEntryActivityTypeIdChanging(Int32 value);
    partial void OnBlogEntryActivityTypeIdChanged();
    partial void OnBlogEntryActivityTypeNameChanging(string value);
    partial void OnBlogEntryActivityTypeNameChanged();
    #endregion
		
		public BlogEntryActivityType()
		{
			this._BlogEntryActivities = new EntitySet<BlogEntryActivity>(new Action<BlogEntryActivity>(this.attach_BlogEntryActivities), new Action<BlogEntryActivity>(this.detach_BlogEntryActivities));
			OnCreated();
		}
		
		[Column(Storage="_BlogEntryActivityTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BlogEntryActivityTypeId
		{
			get
			{
				return this._BlogEntryActivityTypeId;
			}
			set
			{
				if ((this._BlogEntryActivityTypeId != value))
				{
					this.OnBlogEntryActivityTypeIdChanging(value);
					this.SendPropertyChanging();
					this._BlogEntryActivityTypeId = value;
					this.SendPropertyChanged("BlogEntryActivityTypeId");
					this.OnBlogEntryActivityTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_BlogEntryActivityTypeName", DbType="VarChar(100)")]
		public String BlogEntryActivityTypeName
		{
			get
			{
				return this._BlogEntryActivityTypeName;
			}
			set
			{
				if ((this._BlogEntryActivityTypeName != value))
				{
					this.OnBlogEntryActivityTypeNameChanging(value);
					this.SendPropertyChanging();
					this._BlogEntryActivityTypeName = value;
					this.SendPropertyChanged("BlogEntryActivityTypeName");
					this.OnBlogEntryActivityTypeNameChanged();
				}
			}
		}
		
		[Association(Name="BlogEntryActivityType_BlogEntryActivity", Storage="_BlogEntryActivities", OtherKey="BlogEntryActivityTypeId")]
		public EntitySet<BlogEntryActivity> BlogEntryActivities
		{
			get
			{
				return this._BlogEntryActivities;
			}
			set
			{
				this._BlogEntryActivities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BlogEntryActivities(BlogEntryActivity entity)
		{
			this.SendPropertyChanging();
			entity.BlogEntryActivityType = this;
		}
		
		private void detach_BlogEntryActivities(BlogEntryActivity entity)
		{
			this.SendPropertyChanging();
			entity.BlogEntryActivityType = null;
		}
	}
}
#pragma warning restore 1591
